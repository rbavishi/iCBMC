#line 2 "ansi_c_lex.yy.cpp"

#line 4 "ansi_c_lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yyansi_c_create_buffer
#define yy_delete_buffer yyansi_c_delete_buffer
#define yy_flex_debug yyansi_c_flex_debug
#define yy_init_buffer yyansi_c_init_buffer
#define yy_flush_buffer yyansi_c_flush_buffer
#define yy_load_buffer_state yyansi_c_load_buffer_state
#define yy_switch_to_buffer yyansi_c_switch_to_buffer
#define yyin yyansi_cin
#define yyleng yyansi_cleng
#define yylex yyansi_clex
#define yylineno yyansi_clineno
#define yyout yyansi_cout
#define yyrestart yyansi_crestart
#define yytext yyansi_ctext
#define yywrap yyansi_cwrap
#define yyalloc yyansi_calloc
#define yyrealloc yyansi_crealloc
#define yyfree yyansi_cfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyansi_crestart(yyansi_cin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyansi_cleng;

extern FILE *yyansi_cin, *yyansi_cout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyansi_ctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yyansi_ctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyansi_crestart()), so that the user can continue scanning by
	 * just pointing yyansi_cin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yyansi_ctext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyansi_cleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yyansi_cwrap()'s to do buffer switches
 * instead of setting up a fresh yyansi_cin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyansi_crestart (FILE *input_file  );
void yyansi_c_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yyansi_c_create_buffer (FILE *file,int size  );
void yyansi_c_delete_buffer (YY_BUFFER_STATE b  );
void yyansi_c_flush_buffer (YY_BUFFER_STATE b  );
void yyansi_cpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yyansi_cpop_buffer_state (void );

static void yyansi_censure_buffer_stack (void );
static void yyansi_c_load_buffer_state (void );
static void yyansi_c_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yyansi_c_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yyansi_c_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yyansi_c_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yyansi_c_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyansi_calloc (yy_size_t  );
void *yyansi_crealloc (void *,yy_size_t  );
void yyansi_cfree (void *  );

#define yy_new_buffer yyansi_c_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyansi_censure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyansi_censure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyansi_cin = (FILE *) 0, *yyansi_cout = (FILE *) 0;

typedef int yy_state_type;

extern int yyansi_clineno;

int yyansi_clineno = 1;

extern char *yyansi_ctext;
#define yytext_ptr yyansi_ctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yyansi_ctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyansi_cleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 383
#define YY_END_OF_BUFFER 384
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3352] =
    {   0,
        0,    0,    0,    0,    5,    5,   15,   15,    0,    0,
       10,   10,  329,  329,  328,  328,    0,    0,    0,    0,
        0,    0,  348,  348,  362,  362,  371,  371,    0,    0,
      380,  380,  337,  337,    0,    0,  384,    1,  324,   27,
       26,   26,  324,  324,   38,  318,  324,  324,  324,  324,
      324,  324,  324,  324,  319,  319,  324,  323,  324,  324,
      324,  318,  324,  324,  324,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  322,  324,    5,    7,
        6,    6,   15,   14,   25,   20,   19,   19,   25,   22,

       25,   25,   25,   25,   10,   12,   11,   11,  329,  330,
      328,  328,  383,  327,  333,  332,  331,  336,  335,  334,
      326,  325,  350,  348,  349,  349,  350,  350,  366,  362,
      363,  363,  364,  365,  366,  364,  364,  364,  364,  364,
      364,  374,  371,  372,  372,  374,  374,  373,  374,  374,
      367,  368,  374,  374,  369,  374,  374,  374,  370,  370,
      374,  374,  374,  374,  374,  374,  374,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  374,  378,
      375,  376,  377,  382,  380,  381,  381,  379,  382,  345,

      337,  338,  338,  340,  345,  345,  345,  345,  339,   27,
       38,  300,  272,  274,    0,  270,   17,  278,  279,    0,
      277,  276,  268,   38,   38,   38,   38,   38,   38,   38,
       38,  318,  306,  317,  301,  311,    0,    0,  304,  293,
      307,  294,  308,  292,  152,    0,  321,    2,   13,  305,
      319,  321,  319,    0,    0,    0,  321,  319,  319,  319,
        0,  319,  319,  319,  319,  319,  154,  315,  316,  314,
      295,  297,  299,  298,  296,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   26,    0,    0,    0,  312,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,   48,  318,  318,  318,
      318,  318,  318,  318,  318,   56,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  134,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  313,  302,    5,    3,    4,
       15,   20,   22,    0,   18,    0,   22,   22,   22,   22,
       23,    0,    0,   19,    0,   10,    8,    9,  329,  328,
      328,  327,  348,    0,    0,  346,    0,  349,  362,  364,
      363,  364,  364,  364,  364,  364,  364,  371,  270,  278,

      279,  277,  276,  268,  373,  370,    0,  370,  370,  370,
        0,  370,  370,  370,  370,  372,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,   48,  373,  373,  373,  373,  373,  373,
      373,  373,   56,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  134,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  380,  381,  337,  338,    0,    0,    0,   38,   38,
       28,   28,   38,   38,   38,   38,   38,   38,   38,   16,

      153,  303,  320,    0,  321,  320,  321,    0,  319,    0,
      321,    0,    0,    0,  319,  319,    0,    0,    0,  319,
      309,    0,  273,  310,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  112,  105,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,   54,  318,  318,  318,   58,

      318,  318,  318,  128,  318,  130,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  251,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  150,   22,   22,   21,
       21,   22,   22,   22,    0,   24,  347,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  370,    0,
        0,    0,  370,  370,    0,    0,    0,  370,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  112,  105,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,   54,  373,
      373,  373,   58,  373,  373,  373,  128,  373,  130,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  251,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  150,
        0,    0,    0,   28,   38,   38,   38,   38,   38,    0,
      321,    0,  321,  319,  319,  319,    0,  319,    0,  319,
      319,  319,    0,  319,    0,  275,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,   39,  114,  318,
       42,  318,   43,  318,  318,  318,  318,  318,  318,  318,
      318,   50,   51,  318,  318,  318,  318,  318,   55,  318,

       59,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  141,  318,  318,  144,  318,  318,  318,  318,
      318,   72,  318,  318,  318,  318,   21,   22,  364,  364,
      364,  364,  364,  364,  364,  359,  364,  364,  364,  370,
      370,  370,    0,  370,  370,  370,  370,    0,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,   39,  114,  373,
       42,  373,   43,  373,  373,  373,  373,  373,  373,  373,
      373,   50,   51,  373,  373,  373,  373,  373,   55,  373,
       59,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  141,  373,  373,  144,  373,  373,  373,  373,
      373,   72,  373,  373,  373,  373,    0,  344,    0,   38,
       38,   38,   38,   38,    0,    0,    0,  319,    0,    0,

        0,    0,    0,  319,    0,  321,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  194,    0,    0,    0,  280,
      318,  318,   40,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  104,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  232,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      230,  318,  318,  238,  318,  318,  250,  318,  318,  318,
      318,  318,  318,  221,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,   41,  115,  318,  318,  118,

      119,   45,  318,  318,  318,  318,  318,  318,  318,  124,
       53,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      135,  318,  318,  318,  318,  318,  318,   63,  318,  318,
      318,  318,  318,  318,  318,  143,  318,  318,  318,  318,
       70,  318,  147,  318,  318,  318,   74,  318,   22,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,    0,
        0,    0,  370,    0,    0,    0,  370,  373,  373,   40,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  104,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  232,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  230,  373,  373,
      238,  373,  373,  250,  373,  373,  373,  373,  373,  373,
      221,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,   41,  115,  373,  373,  118,  119,   45,  373,
      373,  373,  373,  373,  373,  373,  124,   53,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  135,  373,  373,
      373,  373,  373,  373,   63,  373,  373,  373,  373,  373,
      373,  373,  143,  373,  373,  373,  373,   70,  373,  147,
      373,  373,  373,   74,  373,    0,    0,   38,   35,   38,

       38,   37,    0,    0,    0,  321,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  281,    0,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,   93,  318,  318,  318,  318,   82,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  228,
       91,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  235,  318,  211,  318,  318,

      318,  318,  318,  318,  318,  113,  318,  318,  318,  318,
      318,  318,  121,   49,  318,   52,  125,   57,  318,  318,
      318,  131,  318,  318,  318,  318,  318,  138,  318,  318,
       62,   64,   65,   66,   67,   68,  318,  318,  318,  145,
      318,  242,  318,  318,  318,  318,  151,   22,  364,  364,
      364,  364,  364,  364,  364,  353,  364,  364,    0,    0,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,   93,  373,  373,  373,  373,   82,

      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  228,
       91,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  235,  373,  211,  373,  373,
      373,  373,  373,  373,  373,  113,  373,  373,  373,  373,
      373,  373,  121,   49,  373,   52,  125,   57,  373,  373,
      373,  131,  373,  373,  373,  373,  373,  138,  373,  373,
       62,   64,   65,   66,   67,   68,  373,  373,  373,  145,
      373,  242,  373,  373,  373,  373,  151,    0,    0,   36,
       35,   35,   34,   37,   37,    0,  321,    0,    0,  190,

        0,    0,  197,  196,    0,    0,    0,  271,  269,  318,
      318,  286,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  229,  106,  318,  318,  107,  318,  212,  318,
      318,  318,  318,  222,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,   83,   84,   85,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  254,  318,  318,  318,  318,   86,   87,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  246,  318,

      318,  110,  111,  318,  318,  318,  318,  318,   47,  318,
      126,  318,  318,  132,  318,  318,  136,  318,  318,  318,
      318,  318,  318,   69,  318,  318,  148,  318,  149,  364,
      364,  364,  364,  364,  364,  351,  364,  364,  373,  373,
      286,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  229,  106,  373,  373,  107,  373,  212,  373,  373,
      373,  373,  222,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,   83,   84,   85,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  254,  373,  373,  373,  373,   86,   87,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  246,  373,  373,
      110,  111,  373,  373,  373,  373,  373,   47,  373,  126,
      373,  373,  132,  373,  373,  136,  373,  373,  373,  373,
      373,  373,   69,  373,  373,  148,  373,  149,    0,    0,
       36,   36,   34,   34,   34,    0,  191,    0,  195,    0,
        0,    0,  283,  284,    0,  285,   44,  318,  287,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  253,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,   92,  247,   78,  318,
      318,  318,  318,  318,  318,  318,  318,  176,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  233,  203,   90,
      318,  224,  241,  318,  318,  318,  282,  243,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  214,  318,  116,
      117,  318,   46,  122,  123,  318,  129,   98,  133,  318,
       60,   61,  318,  140,  318,  146,   71,   73,  364,  364,
      360,  364,  364,  364,  364,  364,  283,  284,   44,  373,
      287,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  253,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,   92,  247,
       78,  373,  373,  373,  373,  373,  373,  373,  373,  176,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  233,
      203,   90,  373,  224,  241,  373,  373,  373,  282,  243,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  214,
      373,  116,  117,  373,   46,  122,  123,  373,  129,   98,
      133,  373,   60,   61,  373,  140,  373,  146,   71,   73,
        0,  341,   34,    0,    0,    0,    0,    0,  318,  318,

      318,  318,  289,  318,  318,  318,  318,  318,  206,  101,
      318,  318,  318,  213,  318,  318,  219,   89,  223,  318,
      318,  318,  318,  252,  318,   76,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  174,  318,  318,  318,  318,  318,
      318,  318,  249,  199,  318,  318,  318,  215,  318,  318,
      318,  318,  318,  318,  318,  318,  109,  318,  202,  216,
      318,  120,  127,  137,  318,  318,  364,  364,  364,  364,
      364,  364,  364,  373,  373,  373,  373,  289,  373,  373,
      373,  373,  373,  206,  101,  373,  373,  373,  213,  373,

      373,  219,   89,  223,  373,  373,  373,  373,  252,  373,
       76,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  174,
      373,  373,  373,  373,  373,  373,  373,  249,  199,  373,
      373,  373,  215,  373,  373,  373,  373,  373,  373,  373,
      373,  109,  373,  202,  216,  373,  120,  127,  137,  373,
      373,    0,   34,    0,    0,    0,    0,    0,  318,   79,
       80,  288,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  198,  200,  318,  201,  155,  318,  217,   77,
      318,  318,  318,  157,  318,  318,  318,  318,  318,  318,

      318,  248,  318,  318,  170,  318,  318,  173,  318,  318,
      318,  318,  318,  318,  182,  318,  318,  209,  225,  318,
      218,  244,  318,  318,  318,  318,  226,  318,  318,  318,
      318,  364,  364,  354,  364,  364,  364,  364,  373,   79,
       80,  288,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  198,  200,  373,  201,  155,  373,  217,   77,
      373,  373,  373,  157,  373,  373,  373,  373,  373,  373,
      373,  248,  373,  373,  170,  373,  373,  173,  373,  373,
      373,  373,  373,  373,  182,  373,  373,  209,  225,  373,
      218,  244,  373,  373,  373,  373,  226,  373,  373,  373,

      373,  342,   34,    0,  193,  187,    0,    0,   81,  318,
      318,  102,  318,  318,  318,  318,  318,  318,  231,  207,
      100,  205,   75,  318,  318,  318,  318,   88,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  184,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  180,  318,  318,
      318,  318,  318,  108,  318,  318,  318,  318,  236,  318,
      318,  318,  352,  364,  364,  364,  364,  357,   81,  373,
      373,  102,  373,  373,  373,  373,  373,  373,  231,  207,
      100,  205,   75,  373,  373,  373,  373,   88,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  184,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  180,  373,  373,
      373,  373,  373,  108,  373,  373,  373,  373,  236,  373,
      373,  373,    0,   34,   34,    0,  189,    0,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  237,  156,
      318,  318,  318,  318,  318,  318,  318,  169,  318,  318,
      318,  318,  318,  318,  318,  318,   97,  210,  318,  318,
      318,  220,  227,  318,  318,  142,  364,  364,  364,  364,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      237,  156,  373,  373,  373,  373,  373,  373,  373,  169,
      373,  373,  373,  373,  373,  373,  373,  373,   97,  210,
      373,  373,  373,  220,  227,  373,  373,  142,  343,   34,
       34,   34,   34,   34,    0,    0,  318,  291,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  266,
      204,  318,  318,  318,  318,  208,  245,  318,  318,  318,
      318,  318,  318,  168,  318,  172,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  139,  364,  364,  364,
      364,  373,  291,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  266,  204,  373,  373,  373,  373,

      208,  245,  373,  373,  373,  373,  373,  373,  168,  373,
      172,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  139,   34,   33,   33,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
        0,    0,  290,  318,  318,  318,  263,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  178,  179,
      318,  318,  239,  318,  318,  318,  361,  364,  364,  364,
      290,  373,  373,  373,  263,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  178,  179,  373,  373,
      239,  373,  373,  373,   34,   31,   31,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
        0,    0,  318,  318,  318,  265,  318,  318,  318,  318,
      318,  318,  264,  318,  318,  318,  318,  158,  318,  318,
      318,  318,  318,  318,  318,  185,  318,  318,  318,  318,
      318,  318,  318,  234,   94,  364,  358,  364,  373,  373,
      373,  265,  373,  373,  373,  373,  373,  373,  264,  373,
      373,  373,  373,  158,  373,  373,  373,  373,  373,  373,
      373,  185,  373,  373,  373,  373,  373,  373,  373,  234,

       94,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  192,    0,  318,  255,  318,  257,  318,
      318,  318,  256,  318,  318,  318,  318,   95,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  177,  318,  183,
      318,  318,  364,  364,  373,  255,  373,  257,  373,  373,
      373,  256,  373,  373,  373,  373,   95,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  177,  373,  183,  373,
      373,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       32,   32,   34,   34,   34,   34,    0,  318,  318,  267,
      262,  261,  318,  103,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  240,  186,
      364,  355,  373,  373,  267,  262,  261,  373,  103,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  240,  186,   34,   34,   34,   29,   29,
       34,   34,   34,   34,    0,  258,  318,  318,   96,  318,
      318,  318,  161,  318,  318,  164,  318,  318,  318,  318,
      318,  318,  364,  258,  373,  373,   96,  373,  373,  373,
      161,  373,  373,  164,  373,  373,  373,  373,  373,  373,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,    0,  260,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  171,  318,  318,  364,  260,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  171,  373,  373,
       34,   30,   30,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,    0,  318,  318,  159,  318,  162,
      318,  318,  318,  318,  175,  318,  364,  373,  373,  159,
      373,  162,  373,  373,  373,  373,  175,  373,   34,   34,
       34,   34,   34,   34,   34,   34,   34,    0,  318,  318,
      318,  318,  318,  166,  318,  318,  356,  373,  373,  373,
      373,  373,  166,  373,  373,   34,   34,   34,   34,   34,
       34,   34,   34,    0,  259,  318,  318,  318,  318,  318,

      318,  259,  373,  373,  373,  373,  373,  373,   34,   34,
        0,  318,  318,  318,  318,  318,  181,  373,  373,  373,
      373,  373,  181,    0,  318,  318,  318,  165,  167,  373,
      373,  373,  165,  167,    0,  318,  160,  163,  373,  160,
      163,    0,  318,  373,    0,  318,  373,  188,   99,   99,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    3,    4,
        5,    5,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,    1,    1,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   43,   46,   43,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   50,   56,   43,   43,
       57,   58,   59,   60,   61,    1,   62,   63,   64,   65,

       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,   91,
        1,   92,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[94] =
    {   0,
        1,    1,    1,    2,    1,    1,    1,    1,    3,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    6,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        1,    1,    1,    1,    1,    8,    8,    8,    8,    7,
        7,    3,    3,    9,    9,    9,    3,    3,   10,    3,
        3,    3,    3,    9,    3,    3,    1,    1,    1,   11,
        3,    8,    8,    8,    8,    7,    7,    3,    3,    9,
        9,    3,    9,    3,    3,    3,   10,    3,    3,    3,
        3,    9,    3,    3,    3,    3,    3,   11,    1,   12,
        1,    1,    1

    } ;

static yyconst flex_int16_t yy_base[3405] =
    {   0,
        0,    0,    0,    0,   90,   91, 5591, 5590,   93,  111,
      105,  108, 5503, 5502,   99,  104,  113,  120,  128,  131,
       95,  117,  133,  145,  203,    0,  296,    0,  139,  157,
      387,  390,  393,  404,    0,    0, 5591, 5596, 5596,  152,
     5596, 5596,   88,  398,  490,    0,   95,  129, 5532, 5555,
      150,  163,  397,  152,  561,  635,  142, 5596,  168, 5554,
      148,  178,  400,  428, 5553,  682,  355,  323,  367,  365,
      374,  423, 5510,  121, 5509, 5502,  391,  367,  360, 5517,
      419,  389,  494,   92,  131, 5506, 5596,  380,    0, 5596,
     5561, 5565,    0, 5596, 5596,  430, 5596, 5596,  463,  504,

      463, 5572, 5574,  479,    0, 5596, 5557, 5561,    0, 5596,
        0,  410, 5596, 5596, 5596, 5596, 5596, 5596, 5596, 5596,
     5596, 5596, 5596, 5572, 5596, 5596,  534, 5570, 5596, 5570,
     5596, 5596,    0, 5596, 5568, 5510, 5497, 5493, 5506, 5488,
     5500, 5596, 5562, 5596, 5596,  450,  544,    0,  470,  511,
     5596, 5596, 5530,  519, 5596,  530,  521, 5529,  754,  828,
      519,  566, 5528,  509,  556,  545, 5527,  875,  541,  482,
      579,  384,  493,  609, 5484,  495, 5483, 5476,  563,  607,
      514, 5491,  623,  604,  538,  401,  580, 5480,  463, 5596,
     5596, 5596, 5596, 5596, 5552, 5596, 5596, 5596, 5550, 5596,

     5550, 5596, 5596, 5596, 5548, 5490, 5474, 5473, 5596,  664,
      956, 5596, 5596, 5596,  517,  633, 5596,  670,  680,    0,
      687,  690,  692,    0, 1036, 1116, 5482, 5482, 5476, 5466,
     5469,    0, 5596, 5596, 5596, 5596,  592, 5531, 5596, 5596,
     5596, 5596, 5596, 5527, 5596, 5522, 1154, 5596, 5596, 5596,
     1227,  838, 1298,  690,  573,  863, 5596,  715,  748,  761,
        0, 1369, 1440,  919,  862,  880, 5596, 5596, 5596, 5596,
     5506, 5505, 5503, 5596, 5503,  693, 5478,  966, 5499,  568,
     5458, 5467, 5456, 5449, 5596, 5445,  557, 5450, 5596,  498,
     5452, 5451, 5460, 5459, 5450, 5447, 5441, 5452, 1487, 5455,

     5453, 5456, 5442, 5435, 5453, 5444, 5448, 5438, 5430, 5434,
     5443,  588, 5446, 5445,  621,  649, 5424, 5425, 5422,  633,
     5430, 5426, 5422, 5430, 5418,    0,  630, 5423, 5416, 5422,
     5411,  585, 5421, 5426, 5426, 5430,  657, 5427,  673, 5413,
      668,  541, 5418, 5413,  653,  681, 5409, 5478,  645, 5414,
     5404,  698, 5413, 5411, 5401, 5596, 5596,    0, 5596, 5596,
        0,  781, 1049,  751, 5596,    0,    0, 1128, 1569, 5409,
     5596, 5474,  765, 5596, 5470,    0, 5596, 5596,    0,    0,
      695, 5596, 5473,  761, 5462, 5596, 5470, 5596, 5470,    0,
     5596,  752, 5402, 5406, 5406, 5407, 5404, 5464, 5596, 5596,

     5596, 5596, 5596, 5596,    0, 1616,  774,  971, 1041, 1054,
        0, 1687, 1163, 1212, 1232, 5596,  730, 5390, 5389, 5398,
     5397, 5388, 5385, 5379, 5390, 1734, 5393, 5391, 5394, 5380,
     5373, 5391, 5382, 5386, 5376, 5368, 5372, 5381,  732, 5384,
     5383,  763,  830, 5362, 5363, 5360,  764, 5368, 5364, 5360,
     5368, 5356,    0,  796, 5361, 5354, 5360, 5349,  735, 5359,
     5364, 5364, 5368,  752, 5365,  815, 5351,  834,  708, 5356,
     5351,  801,  760, 5347,  835, 5353, 5343,  774, 5352, 5350,
     5340, 5415, 5596, 5414, 5596, 5333, 5334, 5341,  871, 1009,
     5596,  933, 1816,  952, 5346, 5346, 5336, 5348, 5344, 5596,

     5596, 5596,  929, 1143, 1170, 5596, 1854, 1332, 1356, 1474,
     1918,  944, 5385, 5382, 5596, 1601,  949, 5383, 5380, 5596,
     5596, 5369, 5596, 5596, 5342, 5332, 5324, 5335,  922, 5317,
     5328, 5327, 5323, 5316, 5312, 5323, 5316, 5315, 5316, 5325,
     5313, 5325, 5307, 5323, 5305, 5337, 5333, 5334,  924,  428,
      954, 5314, 5294,  958, 5305, 5315,  976,  945, 5294, 5308,
     1053, 5308, 1225,  968, 5298, 1018, 1195, 5306, 5307, 5290,
     5296, 5303, 5288, 5298, 5304,    0, 5288, 5290, 5290, 5274,
     5264, 5237, 5233, 5230,  850, 5233, 5239, 5234, 5230, 5215,
     5187, 5187, 5193, 5173, 5190,    0, 5185, 5165, 5151,    0,

     5150, 5120, 5104,    0, 5073, 5088, 5073, 5044, 5044, 5056,
     5033, 5034, 5041, 5034, 5003, 4999, 4990, 4982, 4979, 4955,
     4951, 4942, 4944, 4935, 1015, 4948,    0, 4947, 4925, 4919,
     4731, 4724, 4739, 4741, 4740, 4728, 4739, 1031, 1226, 5596,
     1184, 2000, 1258, 4724, 4793, 5596, 5596, 4721, 4718, 4716,
     4729, 4711, 4723, 4720, 4721, 4714, 4710, 4703, 1362, 1065,
     4760, 4757, 5596, 1376, 1070, 4758, 4755, 5596, 4708, 4701,
     4700, 4701, 4710, 4698, 4710, 4689, 4705, 4687, 4719, 4715,
     4716, 1023,  838, 1137, 4696, 4676, 1217, 4687, 4697, 1266,
     1064, 4676, 4690, 1250, 4690, 1367, 1117, 4680, 1310, 1201,

     4687, 4687, 4670, 4675, 4681, 4666, 4676, 4682,    0, 4666,
     4668, 4678, 4672, 4673, 4657, 4655, 4657,  880, 4660, 4670,
     4665, 4667, 4663, 4652, 4652, 4658, 4643, 4660,    0, 4655,
     4643, 4647,    0, 4646, 4650, 4644,    0, 4622, 4645, 4632,
     4623, 4621, 4632, 4614, 4615, 4622, 4624, 4612, 4606, 4608,
     4611, 4615, 4599, 4597, 4597, 4596, 4591, 1041, 4604,    0,
     4602, 4590, 4595, 4589, 4582, 4597, 4599, 4598, 4585, 4596,
     4580, 4579, 4592, 5596, 4583, 4575, 4583, 4578, 4578, 1511,
     1554, 1579, 1697, 1927, 1621, 1691, 4614, 1709,  663, 1815,
     1989, 1993, 1885, 2007, 4608, 5596, 1255, 4552, 4550, 4543,

     4558, 4540, 4542, 4555, 4538, 4537, 4554, 4546, 4540, 4533,
     4527, 4522, 4528, 4531, 4528, 4519, 4503, 4516, 4537, 4528,
     4525, 4505, 4500, 4492, 4489, 4486, 4493, 4496, 4499, 4481,
      913, 4495,  709, 4478, 4482, 4480, 4476, 4478, 4473, 4490,
     4488,  893, 4471, 4486, 4483, 4483, 4464, 4469, 4471, 4472,
     4454, 4452, 1048, 4460, 4463, 4459, 4460, 4460,  839, 4436,
     4443,  887, 4446, 4453, 4442, 4489, 4442, 4448, 4439, 4443,
     4433, 4421, 4430, 4435, 4437, 4415, 4423,    0,    0, 4416,
        0, 4418, 1000, 4406, 4412, 4403, 4413, 4401, 4397, 4397,
     4404,    0,    0, 4406, 4396, 4408, 4391, 4396,    0, 4389,

        0, 4400, 4381, 4396, 4382, 4370, 4380, 4383, 4366, 4381,
     4376, 4371, 4359,   25,  336,  470,  515,  602,  734,  784,
      806,  850,    0,  885,  870,    0, 1407,  933,  941,  981,
      986,    0,  988, 1003, 1017, 1024, 5596, 1036, 1046, 1047,
     1068, 1083, 1086, 1096, 1087,    0, 1097, 1111, 1121, 2052,
     2038, 2056, 1176, 2070, 2115, 2101, 2119, 1183, 1150, 1149,
     1153, 1158, 1174, 1180, 1179, 1194, 1183, 1202, 1225, 1219,
     1222, 1218, 1215, 1210, 1211, 1231, 1243, 1249, 1256, 1251,
     1260, 1272, 1285, 1257, 1272, 1275, 1284, 1291, 1290, 1312,
     1312, 1306, 1297, 1321, 1322, 1326, 1316, 1336, 1340, 1343,

     1330, 1332, 1356, 1344, 1353, 1352, 1359, 1361, 1375, 1342,
     1354, 1391, 1361, 1391, 1384, 1435, 1402, 1411, 1404, 1411,
     1403, 1397, 1409, 1423, 1427, 1414, 1424,    0,    0, 1419,
        0, 1423, 1490, 1413, 1432, 1427, 1439, 1434, 1434, 1436,
     1445,    0,    0, 1449, 1441, 1455, 1443, 1451,    0, 1452,
        0, 1465, 1449, 1466, 1476, 1466, 1478, 1483, 1468, 1485,
     1482, 1488, 1479, 1482, 1486, 1504, 1520, 1511, 1518, 1525,
     1546, 1538,    0, 1550, 1530,    0, 1554, 1540, 1548, 1549,
     1536,    0, 1540, 1543, 1557, 1559, 1553, 5596, 1550, 1557,
     1552, 2181, 1560, 1568, 1625, 1613, 1624, 5596, 1602, 2196,

     1630, 1631, 1631, 5596, 1826, 2206, 1582, 1597, 1577, 1593,
     1585, 1595, 1607, 1598, 1616, 5596, 1600, 1616, 1611, 5596,
     1610, 1618,    0, 1617, 1619, 1616, 1626, 1616, 1630, 1639,
     1660, 1656, 1669, 1638, 1646, 1649, 1653, 1664, 1661, 1674,
     1660, 1676, 1665, 1663, 1671, 1680, 1681, 1667, 1687, 1688,
     1687, 1689, 1695, 1693, 1697, 1696, 1759,    0, 2176, 1701,
     1688, 1701, 1695, 1704, 1709, 1760, 1719, 1716, 1709, 1717,
        0, 1712, 1730, 1734, 1725, 1740,    0, 1742, 1739, 1756,
     1741, 1743, 1763,    0, 1764, 1756, 1748, 1757, 1751, 1768,
     1758, 1773, 1774, 1795, 1780,    0,    0, 1835, 1840,    0,

        0, 1799, 1791, 1781, 1795, 1804, 1806, 1809, 1812,    0,
        0, 1824, 1824, 1818, 1819, 1836, 1827, 1835, 1836, 1837,
        0, 1841, 1859, 1862, 1847, 1859, 1855,    0, 1866, 1866,
     1870, 1854, 1867, 1875, 1885,    0, 1886, 1888, 1893, 1891,
        0, 1885,    0, 1899, 1895, 1905,    0, 1889, 2240, 1901,
     1909, 1908, 1903, 1901, 1896, 1912, 1914, 1903, 1903, 1963,
     1961, 1962, 5596, 1972, 1969, 1968, 5596, 1919, 1931,    0,
     1933, 1933, 1929, 1940, 1931, 1944, 1953, 1975, 1971, 1984,
     1963, 1971, 1957, 1964, 1975, 1969, 1980, 1966, 1982, 1971,
     1969, 1977, 1988, 1989, 1975, 1995, 2003, 2003, 2005, 2008,

     2019, 2002, 2002, 2064,    0, 2209, 2007, 2004, 2017, 2015,
     2027, 2035, 2080, 2039, 2039, 2032, 2042,    0, 2037, 2055,
     2060, 2048, 2064,    0, 2065, 2059, 2067, 2053, 2055, 2086,
        0, 2087, 2078, 2070, 2080, 2074, 2092, 2082, 2096, 2100,
     2104, 2089,    0,    0, 2141, 2147,    0,    0, 2109, 2101,
     2091, 2105, 2113, 2115, 2118, 2112,    0,    0, 2126, 2127,
     2121, 2118, 2130, 2120, 2118, 2119, 2132,    0, 2134, 2152,
     2173, 2163, 2175, 2172,    0, 2183, 2182, 2186, 2170, 2183,
     2195, 2195,    0, 2210, 2212, 2216, 2213,    0, 2206,    0,
     2220, 2213, 2223,    0, 2207, 2225, 2220, 2227, 2291, 2293,

     2233, 2294, 2269, 2308, 2278, 2318, 2280, 2231, 2231, 2246,
     2261, 2262, 2247, 2283, 2269, 2276, 2286, 2273, 5596, 2281,
     2293, 2292, 2291, 2296, 2289, 2285, 2279, 2298, 2298, 2317,
     2310, 2327, 2292, 2307, 2300, 2310, 2307, 2292, 2301, 2353,
     2314, 2305, 2298, 2300, 2305, 2308, 2320, 2312, 2305, 2321,
     2326, 2327, 2305, 2316, 2332, 2320, 2373, 2374, 2373,    0,
     2336, 2339, 2330, 2338, 2337, 2330, 2331, 2347, 2348, 2340,
     2354, 2344, 2353, 2343, 2355, 2356, 2349, 2401, 2400,    0,
     2365, 2348, 2362, 2362, 2368, 2361, 2368, 2371, 2358, 2365,
     2357, 2371, 2362, 2358, 2361,    0, 2375,    0, 2365, 2381,

     2378, 2372, 2367, 2367, 2381,    0, 2388, 2389, 2366, 2370,
     2376, 2373,    0,    0, 2385,    0,    0,    0, 2390, 2395,
     2381,    0, 2380, 2384, 2385, 2396, 2382,    0, 2398, 2401,
        0,    0,    0, 2405,    0,    0, 2386, 2407, 2402,    0,
     2396,    0, 2405, 2399, 2400, 2393,    0, 2472, 2401, 2407,
     2417, 2413, 2400, 2405, 2417,    0, 2421, 2423, 2456, 2457,
     2427, 2423, 2422, 2428, 2421, 2417, 2422, 2441, 2441, 2460,
     2453, 2470, 2435, 2450, 2442, 2452, 2449, 2434, 2443, 2495,
     2456, 2447, 2440, 2442, 2447, 2450, 2462, 2454, 2447, 2463,
     2468, 2469, 2447, 2458, 2474, 2462, 2515, 2516, 2515,    0,

     2478, 2481, 2472, 2480, 2479, 2472, 2473, 2489, 2490, 2482,
     2496, 2486, 2495, 2485, 2497, 2498, 2491, 2543, 2542,    0,
     2507, 2490, 2504, 2504, 2510, 2503, 2510, 2513, 2500, 2507,
     2499, 2513, 2504, 2500, 2503,    0, 2517,    0, 2507, 2523,
     2520, 2514, 2509, 2509, 2523,    0, 2530, 2531, 2508, 2512,
     2518, 2515,    0,    0, 2527,    0,    0,    0, 2532, 2537,
     2523,    0, 2522, 2526, 2527, 2538, 2524,    0, 2540, 2543,
        0,    0,    0, 2547,    0,    0, 2528, 2549, 2544,    0,
     2538,    0, 2547, 2541, 2542, 2535,    0, 2536, 2545, 2616,
        0, 2617, 2618,    0, 2619, 2602, 2612, 2569, 2563, 5596,

     2581, 2573, 5596, 5596, 2585, 2565, 2588, 5596, 5596, 2570,
     2584, 2649, 2568, 2581, 2591, 2594, 2578, 2597, 2598, 2612,
     2621, 2624, 2598,    0, 2602, 2585,    0, 2597, 2607, 2642,
     2647, 2598, 2606, 2612, 2598, 2590, 2596, 2598, 2617, 2607,
     2659, 2612, 2610, 2604, 2609, 2616, 2611, 2610, 2610, 2621,
     2622, 2612, 2633, 2630, 2668,    0,    0,    0, 2618, 2619,
     2638, 2626, 2629, 2626, 2622, 2624, 2641, 2640, 2646, 2635,
     2640, 2638, 2651,    0, 2632, 2634, 2651, 2655,    0,    0,
     2657, 2649, 2655, 2644, 2649, 2648, 2662, 2660, 2659, 2659,
     2655, 2668, 2651, 2661, 2671, 2657, 2668, 2662,    0, 2663,

     2669,    0,    0, 2657, 2658, 2663, 2675, 2676,    0, 2662,
        0, 2680, 2664,    0, 2679, 2668,    0, 2682, 2670, 2669,
     2689, 2686, 2680,    0, 2688, 2690,    0, 2690,    0, 2691,
     2683, 2698, 2695, 2684, 2683,    0, 2684, 2684, 2685, 2699,
     2764, 2683, 2696, 2706, 2709, 2693, 2712, 2713, 2727, 2736,
     2739, 2713,    0, 2717, 2700,    0, 2712, 2722, 2757, 2762,
     2713, 2721, 2727, 2713, 2705, 2711, 2713, 2732, 2722, 2774,
     2727, 2725, 2719, 2724, 2731, 2726, 2725, 2725, 2736, 2737,
     2727, 2748, 2744, 2782,    0,    0,    0, 2732, 2733, 2752,
     2740, 2743, 2740, 2736, 2738, 2755, 2754, 2760, 2749, 2754,

     2752, 2765,    0, 2746, 2748, 2765, 2769,    0,    0, 2771,
     2763, 2769, 2758, 2763, 2762, 2776, 2774, 2773, 2773, 2769,
     2782, 2765, 2775, 2785, 2771, 2782, 2776,    0, 2777, 2783,
        0,    0, 2771, 2772, 2777, 2789, 2790,    0, 2776,    0,
     2794, 2778,    0, 2793, 2782,    0, 2796, 2784, 2783, 2803,
     2800, 2794,    0, 2802, 2804,    0, 2804,    0, 2801, 2806,
        0, 2870,    0, 2871, 2813, 2814, 5596, 2811, 5596, 2815,
     2817, 2818,    0,    0, 2878, 5596,    0, 2860,    0, 2804,
     2810, 2824, 2815, 2848, 2839, 2841, 2828, 2827, 2813, 2810,
     2822, 2837, 2838, 2839, 2828, 2817, 2842, 2838, 2828,    0,

     2836, 2834, 2822, 2886, 2889, 2836, 2851, 2833, 2837, 2840,
     2835, 2847, 2852, 2840, 2840, 2860,    0, 2861,    0, 2842,
     2858, 2845, 2843, 2861, 2847, 2855, 2864,    0, 2845, 2871,
     2860, 2857, 2859, 2854, 2876, 2859, 2863,    0,    0,    0,
     2876, 2880,    0, 2869, 2878, 2871,    0, 2884, 2871, 2861,
     2879, 2886, 2878, 2871, 2878, 2890, 2882,    0, 2895,    0,
        0, 2878,    0,    0,    0, 2892,    0,    0,    0, 2894,
        0,    0, 2880,    0, 2885,    0,    0,    0, 2897, 2890,
        0, 2903, 2903, 2905, 2901, 2898,    0,    0,    0, 2947,
        0, 2891, 2897, 2911, 2902, 2935, 2926, 2927, 2914, 2913,

     2899, 2896, 2908, 2923, 2924, 2925, 2914, 2903, 2928, 2924,
     2914,    0, 2922, 2920, 2908, 2972, 2975, 2922, 2937, 2919,
     2923, 2926, 2921, 2933, 2938, 2926, 2926, 2946,    0, 2947,
        0, 2928, 2944, 2931, 2929, 2947, 2933, 2941, 2950,    0,
     2931, 2957, 2946, 2943, 2945, 2940, 2962, 2945, 2949,    0,
        0,    0, 2962, 2966,    0, 2955, 2964, 2957,    0, 2970,
     2957, 2947, 2964, 2971, 2963, 2956, 2963, 2975, 2967,    0,
     2980,    0,    0, 2963,    0,    0,    0, 2977,    0,    0,
        0, 2979,    0,    0, 2965,    0, 2970,    0,    0,    0,
     2974, 5596, 2984, 2968, 2970, 2978, 2979, 2978, 3031, 3032,

     3031, 2971,    0, 2978, 2983, 2999, 3000, 3001, 3002, 3003,
     2984, 2989, 3006,    0, 2987, 2988,    0, 3009,    0, 3007,
     3006, 2997, 3001,    0, 3046,    0, 3003, 2998, 3008, 2993,
     3018, 3012, 2999, 3004, 3003, 3004, 3020, 3026, 3009, 3028,
     3010, 3025, 3024, 3007,    0, 3015, 3021, 3034, 3031, 3026,
     3025, 3035,    0,    0, 3035, 3022, 3043,    0, 3035, 3033,
     3046, 3042, 3039, 3035, 3049, 3046,    0, 3040,    0,    0,
     3033,    0,    0,    0, 3035, 3052, 3056, 3048, 3058, 3041,
     3041, 3047, 3036, 3101, 3102, 3101, 3041,    0, 3048, 3053,
     3069, 3070, 3071, 3072, 3073, 3054, 3059, 3076,    0, 3057,

     3058,    0, 3079,    0, 3077, 3076, 3067, 3071,    0, 3116,
        0, 3073, 3068, 3078, 3063, 3088, 3082, 3069, 3074, 3073,
     3074, 3090, 3096, 3079, 3098, 3080, 3095, 3094, 3077,    0,
     3085, 3091, 3104, 3101, 3096, 3095, 3105,    0,    0, 3105,
     3092, 3113,    0, 3105, 3103, 3116, 3112, 3109, 3105, 3119,
     3116,    0, 3110,    0,    0, 3103,    0,    0,    0, 3105,
     3122, 3121, 3116, 3137, 3110, 3125, 3110, 3118, 3165,    0,
        0,    0, 3115, 3132, 3136, 3136, 3140, 3143, 3144, 3140,
     3141, 3146,    0,    0, 3148,    0,    0, 3135,    0,    0,
     3141, 3146, 3145,    0, 3141, 3136, 3146, 3157, 3137, 3140,

     3136,    0, 3161, 3148,    0, 3146, 3164,    0, 3161, 3154,
     3152, 3159, 3168, 3168,    0, 3174, 3175, 3176,    0, 3159,
        0,    0, 3174, 3165, 3180, 3169, 3182, 3158, 3159, 3180,
     3185, 3187, 3174,    0, 3184, 3181, 3171, 3187, 3225,    0,
        0,    0, 3175, 3192, 3196, 3196, 3200, 3203, 3204, 3200,
     3201, 3206,    0,    0, 3208,    0,    0, 3195,    0,    0,
     3201, 3206, 3205,    0, 3201, 3196, 3206, 3217, 3197, 3200,
     3196,    0, 3221, 3208,    0, 3206, 3224,    0, 3221, 3214,
     3212, 3219, 3228, 3228,    0, 3234, 3235, 3236,    0, 3219,
        0,    0, 3234, 3225, 3240, 3229, 3242, 3218, 3219, 3240,

     3245, 3247, 3306, 3229, 5596, 5596, 3245, 3236,    0, 3247,
     3252,    0, 3236, 3246, 3256, 3235, 3251, 3254,    0,    0,
        0, 3264,    0, 3253, 3261, 3243, 3268,    0, 3270, 3257,
     3266, 3260, 3266, 3261, 3276, 3274, 3278,    0, 3271, 3278,
     3276, 3263, 3264, 3284, 3268, 3269, 3287,    0, 3289, 3287,
     3291, 3292, 3288,    0, 3287, 3277, 3284, 3297,    0, 3282,
     3281, 3288,    0, 3296, 3288, 3277, 3304,    0,    0, 3300,
     3305,    0, 3289, 3299, 3309, 3287, 3303, 3305,    0,    0,
        0, 3316,    0, 3305, 3313, 3295, 3320,    0, 3322, 3310,
     3318, 3312, 3318, 3313, 3328, 3326, 3330,    0, 3323, 3330,

     3328, 3315, 3316, 3336, 3320, 3321, 3339,    0, 3341, 3339,
     3343, 3344, 3340,    0, 3339, 3329, 3336, 3349,    0, 3334,
     3333, 3340, 3353, 3412, 3413, 3338, 5596, 3337, 3340, 3347,
     3342, 3346, 3342, 3348, 3345, 3358, 3369, 3353, 3351, 3352,
     3346, 3372, 3375, 3379, 3370, 3387, 3388, 3384,    0,    0,
     3364, 3368, 3380, 3389, 3383, 3377, 3377,    0, 3389, 3394,
     3397, 3385, 3401, 3384, 3382, 3393,    0,    0, 3403, 3407,
     3403,    0,    0, 3404, 3390,    0, 3411, 3392, 3408, 3393,
     3397, 3404, 3399, 3403, 3399, 3405, 3401, 3413, 3409, 3409,
     3407, 3408, 3402, 3428, 3421, 3425, 3416, 3434, 3435, 3431,

        0,    0, 3411, 3415, 3427, 3435, 3429, 3423, 3423,    0,
     3435, 3440, 3443, 3431, 3447, 3430, 3428, 3439,    0,    0,
     3449, 3453, 3449,    0,    0, 3450, 3436,    0, 5596, 3515,
     3516, 3590, 3673, 3446, 3453, 3462, 3444,    0, 3464, 3453,
     3447, 3458, 3468, 3453, 3472, 3469, 3484, 3485, 3482,    0,
        0, 3481, 3470, 3485, 3490,    0,    0, 3487, 3493, 3494,
     3476, 3496, 3478,    0, 3497,    0, 3495, 3493, 3477, 3484,
     3503, 3504, 3486, 3487, 3501, 3494,    0, 3510, 3511, 3512,
     3500, 3495,    0, 3515, 3504, 3496, 3507, 3517, 3502, 3521,
     3518, 3523, 3524, 3521,    0,    0, 3520, 3509, 3524, 3529,

        0,    0, 3528, 3534, 3535, 3518, 3538, 3519,    0, 3538,
        0, 3537, 3536, 3520, 3527, 3546, 3547, 3529, 3538, 3552,
     3545,    0, 3619, 5596,    0, 3621, 3623, 3593, 3628, 3607,
     3753, 3638, 3677, 3815,    0, 3880, 3739, 3746, 3561, 3559,
     3565, 3561,    0, 3557, 3575, 3581,    0, 3579, 3569, 3578,
     3589, 3574, 3584, 3596, 3575, 3587, 3598, 3585, 3587, 3588,
     3606, 3609, 3588, 3614, 3601, 3615, 3628, 3620,    0,    0,
     3620, 3624, 3644, 3620, 3627, 3643,    0, 3630, 3652, 3644,
        0, 3629, 3646, 3658,    0, 3656, 3645, 3655, 3664, 3649,
     3659, 3671, 3650, 3660, 3670, 3657, 3659, 3660, 3690, 3699,

     3659, 3676, 3665, 3678, 3696, 3688,    0,    0, 3689, 3685,
     3705, 3682, 3689, 3703, 3769, 5596,    0, 3767, 3845, 3778,
     3753, 3753, 3792, 3951, 3781, 3756, 3756, 3799, 3800, 3717,
     3719, 3718, 3728, 3730, 3732,    0, 3731, 3742, 3755, 3757,
     3749, 3760,    0, 3753, 3749, 3770, 3764,    0, 3753, 3758,
     3766, 3771, 3783, 3771, 3791,    0, 3792, 3796, 3797, 3780,
     3783, 3785, 3788,    0,    0, 3793,    0, 3793, 3809, 3807,
     3808,    0, 3793, 3801, 3812, 3813, 3811, 3820,    0, 3810,
     3806, 3827, 3824,    0, 3813, 3819, 3816, 3821, 3832, 3821,
     3835,    0, 3837, 3841, 3842, 3826, 3830, 3832, 3835,    0,

        0, 4031, 3955, 4017, 3884,    0, 4111, 4024, 4037, 3885,
     3914, 3926, 3918, 5596, 3843, 3844,    0, 3841,    0, 3837,
     3850, 3853,    0, 3876, 3871, 3863, 3876,    0, 3861, 3867,
     3863, 3870, 3866, 3866, 3869, 3891, 3881,    0, 3889,    0,
     3928, 3891, 3889, 3885, 3885,    0, 3883,    0, 3879, 3883,
     3884,    0, 3907, 3903, 3895, 3918,    0, 3903, 3927, 3905,
     3931, 3906, 3911, 3914, 3937, 3930,    0, 3941,    0, 3982,
     3945, 3996, 3989, 4004, 4027, 4009, 4012, 4014, 4040, 4045,
     5596,    0, 4038, 4095, 4062, 4120, 3969, 3979, 3971,    0,
        0,    0, 3979,    0, 3989, 3981, 3989, 3984, 3986, 4003,

     3994, 3993, 3999, 4020, 4005, 4008, 4030, 4032,    0,    0,
     4020,    0, 4033, 4029,    0,    0,    0, 4038,    0, 4048,
     4040, 4047, 4038, 4035, 4052, 4044, 4040, 4046, 4064, 4048,
     4049, 4069, 4071,    0,    0, 4105, 4107, 4148, 5596,    0,
     4133, 4173, 4204, 4287, 4078,    0, 4075, 4082,    0, 4085,
     4092, 4080,    0, 4094, 4082,    0, 4085, 4085, 4088, 4092,
     4089, 4106, 4096,    0, 4093, 4097,    0, 4100, 4107, 4096,
        0, 4110, 4098,    0, 4101, 4102, 4106, 4110, 4107, 4124,
     4201, 4154, 4208, 4168, 4367, 4248, 4281, 4429,    0, 4494,
     4333, 4353, 4130,    0, 4141, 4131, 4134, 4135, 4144, 4141,

     4139, 4146, 4141,    0, 4144, 4160, 4173,    0, 4171, 4159,
     4162, 4159, 4165, 4163, 4161, 4168, 4163,    0, 4166, 4174,
     4249, 5596,    0, 4251, 4459, 4234, 4233, 4234, 4262, 4565,
     4241, 4240, 4244, 4267, 4190, 4210, 4211,    0, 4196,    0,
     4197, 4216, 4203, 4219,    0, 4223, 4226, 4226, 4229,    0,
     4214,    0, 4215, 4234, 4221, 4239,    0, 4242, 4645, 4498,
     4569, 4276,    0, 4725, 4631, 4638, 4277, 4239, 4249, 4242,
     4260, 4264, 4248,    0, 4253, 4257,    0, 4265, 4258, 4276,
     4278, 4262,    0, 4263, 4265, 4323, 4325, 4324, 4350, 4332,
     4338, 4337, 4362, 4287,    0, 4298, 4290, 4291, 4297, 4298,

     4295,    0, 4310, 4301, 4302, 4308, 4309, 4306, 4359, 4361,
     4322, 4330, 4319, 4324, 4322, 4323,    0, 4342, 4332, 4333,
     4331, 4335,    0, 4353, 4344, 4339, 4340,    0,    0, 4347,
     4343, 4346,    0,    0, 4345, 4362,    0,    0, 4363,    0,
        0, 4349, 4370, 4371, 4367, 4357, 4359, 5596,    0,    0,
     5596, 4807, 4819, 4831, 4843, 4855, 4867, 4879, 4891, 4903,
     4915, 4927, 4939, 4951, 4963, 4975, 4987, 4999, 5009, 5019,
     5031, 5043, 5055, 5067, 5079, 5091, 5102, 5110, 5118, 5128,
     5135, 5136, 5144, 5156, 5168, 5180, 5192, 5204, 5216, 5228,
     5239, 5247, 5255, 5259, 5267, 5279, 5288, 5295, 5301, 5304,

     5314, 5326, 5338, 5350
    } ;

static yyconst flex_int16_t yy_def[3405] =
    {   0,
     3352, 3352, 3351,    3, 3353, 3353, 3354, 3354, 3355, 3355,
     3356, 3356, 3357, 3357, 3358, 3358, 3359, 3359, 3360, 3360,
     3361, 3361, 3362, 3362, 3351,   25, 3351,   27, 3363, 3363,
     3364, 3364, 3365, 3365, 3366, 3366, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3367, 3368, 3369, 3351, 3351, 3370, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3369, 3351, 3351, 3351, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3351, 3351, 3371, 3351,
     3351, 3351, 3372, 3351, 3351, 3351, 3351, 3351, 3373, 3374,

     3351, 3351, 3351, 3351, 3375, 3351, 3351, 3351, 3376, 3351,
     3377, 3377, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3378, 3351, 3351, 3378, 3378, 3378, 3378, 3378,
     3378, 3351, 3351, 3351, 3351, 3351, 3351, 3379, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3379, 3379, 3379,
     3379, 3379, 3379, 3379, 3379, 3379, 3379, 3379, 3379, 3379,
     3379, 3379, 3379, 3379, 3379, 3379, 3379, 3379, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,

     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3368, 3351, 3351, 3351, 3367, 3367, 3351, 3367, 3367, 3367,
     3367, 3367, 3367, 3368, 3368, 3380, 3368, 3368, 3368, 3368,
     3368, 3369, 3351, 3351, 3351, 3351, 3370, 3370, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351,  247, 3351, 3381, 3351, 3351, 3351, 3351, 3351, 3351,
     3382, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3367, 3370, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3351, 3351, 3383, 3351, 3351,
     3384, 3351, 3385, 3386, 3351, 3386, 3385, 3385, 3387, 3385,
     3351, 3388, 3386, 3351, 3351, 3389, 3351, 3351, 3390, 3391,
     3391, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3392,
     3351, 3392, 3392, 3392, 3392, 3392, 3392, 3351, 3351, 3351,

     3351, 3351, 3351, 3351, 3393, 3351, 3351, 3351, 3351, 3351,
     3394, 3351, 3351, 3351, 3351, 3351, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3395, 3395,
     3351, 3395, 3395, 3395, 3396, 3396, 3396, 3396, 3396, 3351,

     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3397, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3387, 3387, 3351,
     3387, 3387, 3387, 3385, 3388, 3351, 3351, 3392, 3392, 3392,
     3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3351, 3351,
     3351, 3351, 3351, 3398, 3351, 3351, 3351, 3351, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3351, 3351, 3351, 3351, 3396, 3396, 3396, 3396, 3396, 3351,
      511, 3351,  511, 3351, 3351, 3351, 3351, 3399, 3400, 3397,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,

     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3351, 3385, 3392, 3392,
     3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3351,
     3351, 3351, 3351, 3398, 3351, 3351, 3351, 3351, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3351, 3351, 3351, 3396,
     3396, 3396, 3396, 3396, 3351, 3351, 3351, 3351, 3400, 3351,

     3351, 3351, 3351, 3351, 3351,  511, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3385, 3392,
     3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3351, 3351, 3396, 3401, 3396,

     3396, 3402, 3351, 3351, 3351,  511, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3385, 3392, 3392,
     3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3351, 3351,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3351, 3351, 3403,
     3401, 3401, 3404, 3402, 3402, 3351,  511, 3351, 3351, 3351,

     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3392,
     3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3351, 3351,
     3403, 3403, 3404, 3404, 3404, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3369, 3369, 3351, 3351, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3392, 3392,
     3392, 3392, 3392, 3392, 3392, 3392, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3351, 3351, 3404, 3351, 3351, 3351, 3351, 3351, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3392, 3392, 3392, 3392,
     3392, 3392, 3392, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3351, 3404, 3351, 3351, 3351, 3351, 3351, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3351, 3404, 3351, 3351, 3351, 3351, 3351, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3392, 3392, 3392, 3392, 3392, 3392, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3351, 3404, 3404, 3351, 3351, 3351, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3392, 3392, 3392, 3392,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3351, 3404,
     3404, 3404, 3404, 3404, 3351, 3351, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3392, 3392, 3392,
     3392, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3404, 3351, 3404, 3404, 3404, 2732, 3404, 3404,
     3404, 3404, 3404, 3404, 2733, 3404, 3404, 3404, 3404, 3404,
     3351, 3351, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3392, 3392, 3392, 3392,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3404, 3351, 3404, 3404, 3404, 3404,
     3404, 3404, 3404, 2733, 3404, 3404, 3404, 3404, 3404, 3404,
     3351, 3351, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3392, 3392, 3392, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,

     3393, 3404, 3404, 3404, 3404, 2924, 3404, 3404, 3404, 3404,
     3404, 3404, 3404, 3351, 3351, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3392, 3392, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3404, 3404, 3404, 3404, 3404, 3404, 3404, 3404, 3404,
     3351, 3404, 3404, 3404, 3404, 3404, 3351, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3392, 3392, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3404, 3404, 3404, 3351, 3404,
     3404, 3404, 3404, 3404, 3351, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3392, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3404, 3143, 3404, 3404, 3404, 3404, 3404, 3404, 3144, 3404,
     3404, 3404, 3351, 3369, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3369, 3369, 3369, 3369, 3369, 3392, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
     3404, 3351, 3404, 3404, 3404, 3404, 3404, 3404, 3404, 3144,
     3404, 3404, 3404, 3404, 3351, 3369, 3369, 3369, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3392, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3404, 3404,
     3404, 3404, 3230, 3404, 3404, 3404, 3404, 3351, 3369, 3369,
     3369, 3369, 3369, 3369, 3369, 3369, 3392, 3393, 3393, 3393,
     3393, 3393, 3393, 3393, 3393, 3404, 3404, 3404, 3404, 3404,
     3404, 3404, 3404, 3351, 3369, 3369, 3369, 3369, 3369, 3369,

     3369, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3404, 3404,
     3351, 3369, 3369, 3369, 3369, 3369, 3369, 3393, 3393, 3393,
     3393, 3393, 3393, 3351, 3369, 3369, 3369, 3369, 3369, 3393,
     3393, 3393, 3393, 3393, 3351, 3369, 3369, 3369, 3393, 3393,
     3393, 3351, 3369, 3393, 3351, 3369, 3393, 3351, 3369, 3393,
        0, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,

     3351, 3351, 3351, 3351
    } ;

static yyconst flex_int16_t yy_nxt[5690] =
    {   0,
       39,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   39,   39,   50,   51,   39,   52,   53,   54,
       55,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       57,   58,   59,   60,   61,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   62,   46,   46,   46,   46,
       46,   46,   46,   62,   46,   46,   63,   64,   39,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   46,   74,
       46,   46,   75,   76,   77,   78,   79,   46,   80,   81,
       82,   83,   84,   85,   86,   46,   46,   87,   88,   39,
       39,   39,   39,   90,   90,   96,   97,   98,  113,   99,

      100,  112,  113, 1226,   91,   91,  112,  113,  106,   92,
       92,  106,  101,   96,   97,   98,  113,   99,  100,  107,
      113,  212,  107,  113,  108,  116,  117,  108,  233,  234,
      101,  113,  116,  117,  113,  124,  125,  126,  102,  235,
      119,  120,  113,  119,  120,  127,  102,  124,  125,  126,
      103,  191,  192,  122,  210,  193,  102,  127,  113,  211,
      113,  351,  236,  113,  102,  240,  248,  352,  103,  191,
      192,  249,  267,  193,  104,  122,  268,  269,  213,  214,
      242,  274,  275,  241,  276,  250,  114,  326,  113,  277,
      128,  114,  104,  113,  353,  327,  243,  244,  270,  354,

      271,  272,  128,  129,  129,  130,  131,  132,  129,  129,
      129,  133,  129,  129,  129,  129,  134,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  129,
      135,  129,  129,  136,  137,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  138,  133,  133,  139,
      133,  133,  133,  140,  133,  141,  133,  133,  133,  133,
      129,  129,  129,  129,  129,  129,  142,  142,  143,  144,

      145,  146,  147,  142,  148,  149,  150,  142,  151,  152,
      153,  154,  155,  156,  157,  158,  159,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  161,  142,  162,  163,
      164,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  165,  166,  142,  167,  168,  169,  170,  171,
      172,  173,  174,  175,  148,  176,  148,  148,  177,  178,
      179,  180,  181,  148,  182,  183,  184,  185,  186,  187,
      188,  148,  148,  142,  189,  142,  142,  142,  142,  195,
      196,  197,  195,  196,  197,  201,  202,  203,  310,  216,

      198,  311,  278,  198,  217,  204,  201,  202,  203,  218,
      219,  245,  381,  356, 1227,  246,  204,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  306,  312,  307,
      316,  285,  362,  334,  308,  313,  309,  363,  337,  314,
      317,  338,  315,  335,  199,  336,  318,  199,  319,  443,
      205,  279,  330,  206,  344,  220,  331,  345,  320,  444,
      207,  205,  221,  222,  206,  280,  332,  346,  357,  365,
      477,  207,  333,  281,  347,  208,  478,  371,  282,  283,
      209,  284,  372,  212,  321,  373,  208,  340,  341,  826,
      223,  209,  225,  286,  287,  322,  356,  382,  323,  342,

      276,  324,  343,  233,  234,  277,  368,  375,  288,  827,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      366,  235,  348,  217,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  240,  245,  384,  385,  385,  246,
      213,  214,  274,  275,  236,  399,  386,  242,  416,  267,
     1228,  357,  241,  268,  227,  400,  401,  437,  278,  228,
      438,  453,  229,  243,  244,  445,  230,  446,  349,  454,
      536,  231,  251,  350,  220,  269,  370,  447,  537,  252,
     1229,  253,  253,  253,  253,  253,  253,  253,  253,  254,
      254,  387,  464,  509,  509,  465,  270,  255,  271,  272,

      256,  257,  620,  500,  258,  259,  259,  279,  402,  403,
      286,  287,  475,  433,  260,  434,  261,  476,  533,  621,
      435,  280,  436,  255,  457,  288,  256,  257,  458,  281,
      258,  259,  534,  259,  282,  283,  404,  284,  459,  217,
      439,  526,  260,  479,  460,  261,  262,  440,  480,  238,
      605,  441,  527,  252,  442,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  606,  210,  580,  581,  471,
      448,  211,  472,  461,  256,  257,  217, 1230,  264,  265,
      265,  449,  473,  462,  450,  463,  217,  451,  266,  474,
      220,  467,  468,  217,  584,  585,  217,  381,  217,  217,

      256,  257,  599,  469,  264,  265,  470,  265,  252,  592,
      600, 1100,  586,  593,  629,  587,  266,  290,  291,  292,
      293,  588,  624,  294,  630,  295,  611,  220,  296,  256,
      257,  625,  612,  297,  298,  618,  512,  220,  513, 1100,
      614,  514,  299,  515,  220,  300,  301,  220,  302,  220,
      220,  303,  615,  616,  619,  256,  257,  365,  259,  259,
      259,  304,  626,  384,  305,  406,  627,  633,  259,  753,
      634,  365, 1146,  386,  406,  406,  406,  406,  406,  406,
      406,  406,  382,  362,  259,  259,  754,  259,  363, 1147,
      407,  259,  259,  259,  659,  659,  259,  408,  409,  409,

      738,  259,  669, 1231,  258,  259,  259,  410,  366,  411,
      670,  713,  714,  648,  259,  739,  407,  259,  259,  649,
      259,  744,  366,  408,  409,  650,  409,  745,  651,  259,
      258,  259,  652,  259,  653,  410,  717,  718,  411,  412,
      725,  759,  259,  766,  726,  760,  767, 1232,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  732, 1233,
      757,  413,  414,  414,  491,  492,  733,  508,  510,  758,
      510,  415,  747,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  719,  748,  749,  720,  413,  414,  976,

      414,  751,  721,  508,  762,  265,  265,  265, 1175,  415,
      417,  418,  419,  420,  763,  265,  421, 1176,  422,  977,
      752,  423, 1234,  264,  265,  265,  424,  425,  494,  886,
      887,  265,  265,  265,  265,  426,  491,  492,  427,  428,
      517,  429,  518,  265,  430,  519, 1235,  520, 1179,  264,
      265, 1180,  265, 1236,  431,  774,  492,  432,  225, 1036,
     1037,  265,  265,  265,  265, 1156,  787,  506,  278,  506,
      515,  795,  265, 1157,  506,  520,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226, 1143, 1144,  265,  265,
      494,  265,  660,  506,  661,  506,  822,  662,  801,  663,

      265,  506,  802,  823,  824,  825,  845, 1241, 1242,  494,
      846,  490,  491,  492,  409,  409,  409,  279,  828,  834,
      227, 1198,  829, 1199,  409,  228,  830,  835,  229,  831,
      836,  280,  230,  837,  640,  641,  859,  231,  225,  281,
      409,  409,  840,  409,  282,  283,  860,  284, 1243,  841,
      842,  368,  409,  861,  843,  844,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  494, 1244, 1245,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  863,
      924, 1246, 1247,  864,  409,  409,  409,  953,  643, 1248,
      925,  663,  958,  865,  409,  972,  668,  408,  409,  409,

      227, 1249,  973,  974,  975,  228, 1074,  409,  229, 1168,
      409,  409,  230,  409,  849, 1250, 1075,  231,  490,  491,
      492,  370,  409,  408,  409,  995,  409, 1169, 1251,  996,
      368,  850, 1252,  851,  852,  409,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493, 1253, 1254,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  780, 1255,
      780, 1256, 1257,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  494,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  665, 1009,  666,  640,  641,  667,
     1258,  668,  503,  504,  505, 1010, 1259,  505,  505,  505,

      370,  978, 1011,  506,  663,  979,  414,  414,  414,  980,
      505,  668,  981,  505,  505,  505,  414, 1268,  503,  504,
      505,  866, 1269,  505,  505, 1270,  505, 1016,  639,  640,
      641,  506,  414,  414, 1271,  414,  505,  506,  251,  505,
      505,  643,  505, 1272,  414, 1273, 1274,  251,  251,  251,
      251,  251,  251,  251,  251,  414,  414,  414,  867, 1275,
      868,  937,  641, 1276, 1017,  414, 1018, 1277, 1278, 1279,
      258,  259,  259,  869, 1280,  413,  414,  414,  984, 1019,
      260,  414,  414,  643,  414,  414,  985, 1281, 1282,  986,
     1283, 1284,  987,  414,  854, 1107,  258,  259,  855,  259,

      856,  413,  414, 1108,  414,  857, 1109,  858,  260,  251,
     1285,  999, 1286,  414, 1287,  643,  252, 1288,  253,  253,
      253,  253,  253,  253,  253,  253,  254,  254, 1000, 1289,
     1001, 1002,  990, 1290, 1291, 1292, 1295,  256,  257,  991,
      992,  258,  259,  259,  993,  994, 1296,  782, 1293,  782,
     1297,  260,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783, 1298,  256,  257, 1294, 1299,  258,  259, 1300,
      259, 1013, 1301, 1302, 1305, 1014,  509,  509, 1303,  260,
      262, 1306,  659,  659, 1307, 1015, 1304, 1308, 1309,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  784,

      785,  785, 1310, 1311, 1312,  950,  951,  951, 1313,  786,
     1314, 1317,  264,  265,  265,  952, 1318, 1315, 1319,  955,
      956,  956,  266, 1320, 1321,  784,  785, 1324,  785,  957,
     1325,  950,  951, 1328,  951, 1316, 1004,  786,  264,  265,
     1005,  265, 1006,  952, 1322,  955,  956, 1007,  956, 1008,
      266,  262, 1326, 1323, 1329, 1327, 1330,  957,  252, 1331,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
     1332, 1237, 1333, 1334, 1335, 1336, 1238, 1337, 1338,  256,
      257, 1239, 1240,  264,  265,  265, 1339, 1340, 1341, 1342,
     1343, 1344, 1347,  266,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511, 1348,  256,  257, 1349, 1350,  264,
      265, 1345,  265, 1346, 1351, 1352, 1353, 1354, 1355, 1356,
     1357,  266,  546, 1358,  547, 1359, 1360, 1361, 1362, 1363,
      548,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781, 1364, 1365, 1366, 1367, 1368, 1369, 1370,  549,  550,
      551,  552,  553,  554,  555,  556,  557, 1371, 1372,  558,
     1373,  559,  560,  561, 1374,  562,  563,  564,  565,  566,
      567,  639,  640,  641,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781, 1375, 1376, 1377, 1378, 1379,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  783,

      783,  783,  783,  783,  783,  783,  783,  783,  783, 1380,
     1381, 1382,  788, 1383, 1388, 1389, 1390, 1391, 1384,  789,
     1392, 1393, 1394, 1385, 1395, 1396,  643,  406, 1386, 1387,
     1397, 1398, 1399, 1401, 1402, 1098,  406,  406,  406,  406,
      406,  406,  406,  406,  791,  792,  792, 1403, 1098,  793,
     1404, 1098, 1407, 1104,  794, 1104, 1104, 1408, 1411,  408,
      409,  409, 1412, 1413,  785,  785,  785, 1414, 1415,  410,
      791,  792, 1409,  792,  785, 1410, 1416,  793, 1404, 1417,
     1418, 1419,  794, 1420, 1421,  408,  409, 1422,  409, 1423,
      785,  785, 1424,  785, 1425, 1426, 1427,  410,  412, 1428,

     1429, 1430,  785, 1431, 1432, 1433, 1434,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783, 1435, 1436, 1437,
      413,  414,  414, 1438,  784,  785,  785, 1439, 1440, 1441,
      415, 1442, 1443, 1444,  785, 1445, 1446, 1447, 1448, 1449,
     1450, 1451,  791,  792,  792, 1452,  413,  414, 1453,  414,
      784,  785,  794,  785, 1455, 1456, 1472, 1454,  415,  679,
     1473,  680,  785, 1474, 1475, 1476, 1477,  681,  791,  792,
     1457,  792, 1458, 1478, 1480, 1459, 1479, 1460, 1481, 1482,
      794, 1483, 1484, 1485, 1486,  682,  683,  684,  685,  686,

      687,  688,  689,  690, 1487, 1488,  691, 1489,  692,  693,
      694, 1490,  695,  696,  697,  698,  699,  700,  490,  491,
      492, 1491, 1492, 1493, 1494, 1495,  788, 1496, 1497, 1498,
     1499, 1500, 1501,  789, 1502, 1503,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1504, 1506,  791,  792,
      792, 1507, 1508,  793, 1509, 1510, 1511, 1512,  794, 1513,
     1505, 1514, 1515,  494,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  791,  792, 1516,  792, 1517, 1518,
     1519,  793,  503,  508,  505, 1520,  794,  505,  505,  505,

     1105, 1521, 1105,  506, 1522, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1523, 1524, 1525,  503,  508,
      505, 1526, 1527,  505,  505, 1528,  505, 1529, 1530, 1531,
     1532,  506, 1533, 1534, 1535, 1536, 1537,  506,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511, 1095, 1538,
     1096, 1539, 1540, 1097, 1541, 1098,  503, 1542,  505, 1543,
     1544,  505,  505,  505, 1545, 1546, 1547,  506, 1549, 1550,
      785,  785,  785, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
      785, 1558,  503, 1263,  505, 1559, 1263,  505,  505, 1263,
      505, 1267, 1267, 1561, 1560,  506,  785,  785, 1267,  785,

     1562,  506,  639,  640,  641, 1563, 1564, 1565,  785, 1566,
     1101, 1567, 1102, 1568, 1569, 1103, 1570, 1104, 1571, 1572,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
     1573, 1574,  792,  792,  792, 1575,  792,  792,  792, 1576,
     1577, 1578,  792, 1579, 1580, 1581,  792, 1582, 1583, 1584,
      791,  792,  792, 1585, 1586, 1587, 1588,  643,  792,  792,
      792,  792,  792,  792, 1589,  792, 1590, 1591, 1592, 1595,
      792, 1596, 1612, 1260,  792, 1261,  791,  792, 1262,  792,
     1263,  951,  951,  951, 1593, 1597, 1613, 1598,  792, 1614,
     1599,  951, 1600, 1594, 1615,  951,  951,  951, 1616,  950,

      951,  951, 1617, 1618, 1620,  951, 1619,  951,  951,  951,
      951, 1621, 1622,  955,  956,  956, 1623, 1624, 1625,  951,
     1626,  951,  951,  957,  951,  950,  951, 1627,  951, 1628,
     1629, 1630, 1631,  951, 1632, 1633, 1264,  951, 1265,  955,
      956, 1266,  956, 1267,  956,  956,  956, 1634, 1635, 1636,
     1637,  957, 1638, 1639,  956, 1640, 1641, 1642,  956,  956,
      956, 1643,  955,  956,  956, 1644, 1646, 1647,  956, 1648,
      956,  956,  956,  956, 1649, 1650, 1651, 1652, 1653, 1645,
     1654, 1655,  956, 1400,  956,  956, 1656,  956,  955,  956,
     1657,  956, 1658, 1659, 1660, 1661,  956, 1662, 1663, 1664,

      956,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226, 1405, 1665, 1405, 1666, 1667, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1668, 1461, 1462, 1463,
     1464, 1465, 1548, 1669, 1670, 1466, 1671, 1672, 1673, 1674,
     1675, 1676, 1467,  229, 1468, 1469, 1677, 1470, 1471, 1678,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
     1601, 1602, 1603, 1604, 1605, 1679, 1680, 1681, 1606, 1682,
     1683, 1684, 1685, 1686, 1687, 1607, 1688, 1608, 1609, 1689,
     1610, 1611, 1690, 1692, 1693, 1400, 1695, 1098, 1406, 1406,

     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1104, 1698,
     1699, 1700,  370,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226, 1696, 1701, 1696, 1702, 1703, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1704, 1705,
     1706, 1707, 1708, 1709, 1710, 1712, 1713, 1714, 1715, 1716,
     1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1711, 1725,
     1726, 1727, 1728, 1729, 1730, 1732, 1731, 1733, 1734, 1735,
     1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1751,
     1745, 1752, 1753, 1746, 1754, 1755, 1757, 1758, 1759, 1756,

     1760, 1747, 1761, 1763, 1766, 1762, 1767, 1748, 1749, 1750,
     1764, 1765, 1768, 1769, 1771, 1772, 1773, 1770, 1774, 1775,
     1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
     1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
     1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
     1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
     1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
     1826, 1827, 1828, 1829, 1548, 1830, 1831, 1832, 1833, 1834,
     1835, 1836, 1837, 1838, 1263, 1267, 1841, 1842, 1839, 1843,
     1844, 1845,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369, 1840, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
     1853, 1854, 1855, 1856, 1857, 1858, 1859, 1861, 1860, 1862,
     1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
     1873, 1880, 1874, 1881, 1882, 1875, 1883, 1884, 1886, 1887,
     1888, 1885, 1889, 1876, 1890, 1892, 1895, 1891, 1896, 1877,
     1878, 1879, 1893, 1894, 1897, 1898, 1900, 1901, 1902, 1899,
     1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
     1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
     1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
     1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,

     1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
     1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1962, 1692,
     1964, 1695, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
     1974, 1975, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
     1985, 1976, 1986, 1987, 1989, 1990, 1991, 1992, 1993, 1994,
     1995, 1996, 1997, 1988, 1998, 1999, 2000, 2001, 2002, 2003,
     2004, 2006, 2007, 2008, 2009, 2010, 2011, 2005, 2012, 2013,
     2014, 2015, 2016, 2017, 1965, 2018, 2019, 2020, 2021, 2022,

     2023, 2024, 2025, 2026, 2027, 2028, 2030, 2031, 2032, 2033,
     2034, 2035, 2036, 2029, 2037, 2038, 2039, 2040, 2041, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052,
     2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
     2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
     2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
     2083, 2084, 2085, 2086, 2087, 2088, 1975, 2089, 2090, 2091,
     2092, 2093, 2094, 2095, 2096, 2097, 1976, 2098, 2099, 2101,
     2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2100, 2110,
     2111, 2112, 2113, 2114, 2115, 2116, 2118, 2119, 2120, 2121,

     2122, 2123, 2117, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
     2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140,
     2142, 2143, 2144, 2145, 2146, 2147, 2148, 2141, 2149, 2150,
     2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160,
     2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170,
     2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180,
     2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190,
     2191, 2192, 1962, 1964, 2193, 2194, 2195, 2196, 2197, 2198,
     1975, 2199, 2202, 2200, 2203, 2204, 2201, 2205, 2206, 2207,
     1976, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216,

     2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226,
     2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236,
     2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246,
     2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256,
     2257, 2258, 2259, 2260, 2261, 2262, 2263, 1965, 2264, 2265,
     2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275,
     2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2287,
     2285, 2288, 2289, 2286, 2290, 2291, 2292, 2293, 2294, 2295,
     2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305,
     2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315,

     2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325,
     2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335,
     2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345,
     2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355,
     2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365,
     2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375,
     2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385,
     2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395,
     2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405,
     2406, 2407, 2408, 2409, 2410, 2411, 2413, 2412, 2414, 2415,

     2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425,
     2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435,
     2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445,
     2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455,
     2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465,
     2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475,
     2476, 2477, 2478, 2479, 2480, 2481, 2483, 2482, 2484, 2485,
     2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495,
     2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505,
     2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515,

     2519, 2516, 2517, 2520, 2521, 2522, 2523, 2524, 2528, 2529,
     2530, 2531, 2532, 2533, 2534, 2535, 2518, 2536, 2537, 2538,
     2539, 2525, 2540, 2541, 2542, 2543, 2526, 2544, 2527, 2545,
     2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555,
     2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565,
     2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575,
     2579, 2576, 2577, 2580, 2581, 2582, 2583, 2584, 2588, 2589,
     2590, 2591, 2592, 2593, 2594, 2595, 2578, 2596, 2597, 2598,
     2599, 2585, 2600, 2601, 2602, 2603, 2586, 2604, 2587, 2605,
     2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615,

     2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2626,
     2627, 2628, 2629, 2630, 2631, 2633, 2632, 2635, 2625, 2636,
     2637, 2634, 2640, 2638, 2642, 2643, 2639, 2644, 2645, 2646,
     2647, 2648, 2641, 2649, 2650, 2651, 2652, 2653, 2654, 2655,
     2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665,
     2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675,
     2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2685, 2684,
     2687, 2688, 2689, 2692, 2686, 2690, 2694, 2695, 2691, 2696,
     2697, 2698, 2699, 2693, 2700, 2701, 2702, 2703, 2704, 2705,
     2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715,

     2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725,
     2726, 2727, 2728, 2729, 2624, 2730, 2735, 2736, 2737, 2738,
     2739, 2740, 2741, 2742, 2625, 2743, 2731, 2744, 2747, 2748,
     2749, 2750, 2751, 2732, 2733, 2733, 2733, 2733, 2733, 2733,
     2733, 2733, 2733, 2745, 2752, 2753, 2754, 2755, 2756, 2757,
     2758, 2759, 2760, 2746, 2761, 2762, 2763, 2764, 2765, 2766,
     2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776,
     2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786,
     2787, 2788, 2789, 2790, 2792, 2793, 2794, 2795, 2796, 2734,
     2797, 2798, 2799, 2791, 2800, 2801, 2802, 2803, 2804, 2805,

     2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815,
     2816, 2817, 2818, 2819, 2820, 2821, 2822, 2730, 2823, 2824,
     2825, 2839, 2841, 2842, 2843, 2844, 2845, 2840, 2731, 2846,
     2847, 2848, 2849, 2850, 2851, 2732, 2733, 2733, 2733, 2733,
     2733, 2733, 2733, 2733, 2733, 2852, 2853, 2854, 2856, 2857,
     2858, 2859, 2860, 2861, 2862, 2863, 2864, 2855, 2865, 2866,
     2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876,
     2877, 2878, 2879, 2826, 2880, 2881, 2882, 2883, 2884, 2885,
     2886, 2887, 2888, 2889, 2890, 2891, 2892, 2894, 2895, 2896,
     2897, 2734, 2827, 2898, 2899, 2900, 2893, 2901, 2902, 2903,

     2904, 2828, 2905, 2829, 2906, 2907, 2908, 2909, 2910, 2911,
     2828, 2828, 2828, 2828, 2828, 2828, 2828, 2828, 2912, 2913,
     2914, 2823, 2824, 2825, 2824, 2827, 2830, 2919, 2919, 1963,
     2915, 2916, 2917, 2831, 2832, 2832, 2829, 2929, 2930, 2931,
     2827, 2932, 2933, 2833, 2934, 2834, 2935, 2936, 1963, 2937,
     2938, 2829, 2830, 2939, 2940, 1963, 2941, 2942, 2943, 2831,
     2832, 2944, 2832, 2945, 2946, 2947, 2948, 2949, 2954, 2950,
     2951, 2833, 2952, 2953, 2834, 2827, 2826, 1963, 2955, 2827,
     2956, 2832, 2832, 2832, 2835, 2918, 2829, 2957, 2958, 2959,
     2829, 2832, 2960, 2835, 2835, 2835, 2835, 2835, 2835, 2835,

     2835, 2835, 2835, 2961, 2962, 2963, 2964, 2832, 2832, 2965,
     2832, 2966, 2967, 2968, 2969, 2970, 2836, 2837, 2837, 2832,
     2831, 2832, 2832, 2971, 2972, 2973, 2838, 2974, 2975, 2976,
     2832, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2990,
     2991, 2827, 2836, 2837, 2992, 2837, 2831, 2832, 2827, 2832,
     2993, 2985, 2829, 2986, 2838, 2827, 2994, 2995, 2832, 2829,
     2987, 2996, 2988, 2989, 2997, 2998, 2829, 2999, 3000, 3001,
     2916, 2915, 2916, 2917, 2920, 2923, 2921, 2923, 2928, 2922,
     2928, 2923, 2837, 2837, 2837, 3013, 3014, 3015, 3016, 2836,
     2837, 2837, 2837, 3017, 2827, 3018, 2832, 2832, 2832, 2837,

     3005, 2827, 3011, 3010, 2923, 2829, 2832, 2928, 2837, 2837,
     3019, 2837, 2829, 3012, 3020, 2836, 2837, 3021, 2837, 3022,
     2837, 3023, 2832, 2832, 3024, 2832, 2918, 2837, 3025, 3026,
     3027, 3028, 3029, 3030, 2832, 2924, 2924, 2924, 2924, 2924,
     2924, 2924, 2924, 2924, 2924, 3031, 3032, 2827, 3033, 3034,
     2924, 2924, 2924, 2924, 2924, 2924, 3035, 3036, 2829, 3037,
     3038, 3039, 3040, 3041, 3042, 2919, 2919, 3043, 3044, 3045,
     3046, 3047, 3048, 3049, 3050, 3051, 2924, 2924, 2924, 2924,
     2924, 2924, 2827, 3052, 3053, 3054, 3055, 3056, 3002, 3003,
     3003, 3057, 3058, 2829, 3059, 3060, 3061, 3062, 3004, 3063,

     3064, 2925, 3065, 2926, 3066, 3067, 2927, 3068, 2928, 3069,
     3070, 3071, 2923, 2928, 3002, 3003, 3011, 3003, 3087, 3088,
     3084, 3089, 3090, 2837, 2837, 2837, 3004, 3012, 3080, 3081,
     3082, 3085, 3091, 2837, 3086, 3092, 3093, 3094, 3095, 3096,
     3097, 3098, 3100, 3099, 3101, 3103, 3102, 3104, 3105, 2837,
     2837, 3106, 2837, 3107, 3108, 3109, 3110, 2827, 3111, 3112,
     3113, 2837, 3006, 3114, 3115, 3116, 3117, 3118, 2829, 3119,
     3120, 3006, 3006, 3006, 3006, 3006, 3006, 3006, 3006, 3006,
     3006, 3121, 3122, 3083, 3125, 3128, 3006, 3006, 3006, 3006,
     3006, 3006, 3129, 3130, 3007, 3008, 3008, 3131, 3003, 3003,

     3003, 3123, 3132, 3124, 3009, 3126, 3133, 3127, 3003, 3134,
     3135, 3075, 3006, 3006, 3006, 3006, 3006, 3006, 3136, 2827,
     3007, 3008, 3075, 3008, 3003, 3003, 2827, 3003, 3075, 2827,
     2829, 3137, 3009, 2827, 3079, 3079, 3003, 2829, 3079, 2827,
     2829, 3081, 2827, 3145, 2829, 3146, 3147, 3080, 3081, 3082,
     2829, 3148, 3072, 2829, 3073, 3149, 3150, 3074, 3151, 3075,
     3002, 3003, 3003, 3152, 3138, 3139, 3140, 3008, 3008, 3008,
     3003, 3153, 3154, 3155, 3003, 3003, 3003, 3008, 3156, 3157,
     3007, 3008, 3008, 3158, 3003, 3159, 3002, 3003, 3160, 3003,
     3008, 3161, 3162, 3008, 3008, 3163, 3008, 3084, 3003, 3164,

     3003, 3003, 3083, 3003, 3165, 3008, 3007, 3008, 3085, 3008,
     3166, 3086, 3003, 2827, 3167, 3168, 3169, 3170, 3008, 3141,
     3171, 3172, 3142, 3173, 2829, 3174, 3175, 3176, 3177, 3178,
     3179, 3180, 3076, 3075, 3077, 3079, 3139, 3078, 3193, 3079,
     3143, 3144, 3144, 3144, 3144, 3144, 3144, 3144, 3144, 3144,
     3138, 3139, 3140, 3194, 3008, 3008, 3008, 3195, 3196, 3197,
     3198, 3199, 3200, 3201, 3008, 3202, 3203, 3204, 3205, 3206,
     3207, 3208, 3209, 3210, 3211, 3142, 3212, 3213, 3214, 3215,
     3008, 3008, 3216, 3008, 3217, 3218, 3219, 3220, 3225, 3225,
     1963, 3235, 3008, 3143, 3144, 3144, 3144, 3144, 3144, 3144,

     3144, 3144, 3144, 3181, 3236, 3141, 3181, 3237, 3238, 1963,
     3221, 3222, 3223, 3239, 3183, 3182, 1963, 3183, 3240, 3241,
     3242, 3243, 3244, 3245, 3182, 3182, 3182, 3182, 3182, 3182,
     3182, 3182, 3246, 3247, 3248, 3249, 3250, 3251, 1963, 3252,
     3184, 3253, 3254, 3255, 3256, 3257, 3258, 3185, 3186, 3186,
     3181, 3221, 3222, 3223, 3222, 3229, 3262, 3187, 3229, 3188,
     3229, 3183, 3234, 3267, 3181, 3224, 3184, 3234, 3234, 3181,
     3268, 3269, 3270, 3185, 3186, 3183, 3186, 3271, 3272, 3273,
     3183, 3274, 3275, 3181, 3276, 3187, 3277, 3278, 3188, 3181,
     3279, 3186, 3186, 3186, 3183, 3280, 3281, 3282, 3189, 3283,

     3183, 3186, 3284, 3285, 3229, 3234, 3224, 3189, 3189, 3189,
     3189, 3189, 3189, 3189, 3189, 3189, 3189, 3186, 3186, 3294,
     3186, 3295, 3296, 3297, 3185, 3186, 3186, 3298, 3299, 3186,
     3190, 3191, 3191, 3300, 3186, 3181, 3301, 3302, 3303, 3304,
     3192, 3305, 3306, 3307, 3308, 3309, 3183, 3289, 3289, 3289,
     3185, 3186, 3181, 3186, 3310, 3181, 3190, 3191, 3293, 3191,
     3293, 3293, 3186, 3183, 3181, 3311, 3183, 3312, 3192, 3181,
     3313, 3314, 3315, 3316, 3317, 3183, 3191, 3191, 3191, 3318,
     3183, 3319, 3320, 3321, 3322, 3323, 3191, 3289, 3226, 3293,
     3227, 3324, 3325, 3228, 3326, 3229, 3190, 3191, 3191, 3327,

     3328, 3329, 3191, 3191, 3330, 3191, 3191, 3331, 3332, 3333,
     3186, 3186, 3186, 3334, 3191, 3335, 3336, 3337, 3338, 3339,
     3186, 3340, 3190, 3191, 3341, 3191, 3342, 3343, 3344, 3345,
     3346, 3347, 3348, 3349, 3191, 3350, 3186, 3186, 1225, 3186,
     1224, 1223, 1222, 1221, 1220, 1219, 1218, 1217, 3186, 3230,
     3230, 3230, 3230, 3230, 3230, 3230, 3230, 3230, 3230, 1216,
     1215, 3181, 1214, 1213, 3230, 3230, 3230, 3230, 3230, 3230,
     1212, 1211, 3183, 1210, 1209, 1208, 1207, 1206, 1205, 3225,
     3225, 1204, 1203, 1202, 1201, 1200, 1197, 1196, 1195, 1194,
     3230, 3230, 3230, 3230, 3230, 3230, 3181, 1193, 1192, 1191,

     3181, 1190, 3259, 3260, 3260, 1189, 1188, 3183, 1187, 1186,
     1185, 3183, 3261, 1184, 1183, 3231, 1182, 3232, 1181, 1178,
     3233, 1177, 3234, 1174, 1173, 1172, 1171, 1170, 3259, 3260,
     1167, 3260, 1166, 1165, 1164, 1163, 1162, 3191, 3191, 3191,
     3261, 3260, 3260, 3260, 1161, 1160, 1159, 3191, 1158, 1155,
     1154, 3260, 1153, 1152, 1151, 1150, 1149, 1148, 1145, 1142,
     1141, 1140, 1139, 3191, 3191, 1138, 3191, 3260, 3260, 1137,
     3260, 3181, 1136, 1135, 1134, 3191, 3263, 1133, 1132, 3260,
     1131, 1130, 3183, 1129, 1128, 3263, 3263, 3263, 3263, 3263,
     3263, 3263, 3263, 3263, 3263, 1127, 1126, 1125, 1124, 1123,

     3263, 3263, 3263, 3263, 3263, 3263, 1122, 1121, 3264, 3265,
     3265, 1120, 3259, 3260, 3260, 1119, 1118, 1117, 3266, 1116,
     1115, 1114, 3260, 1113, 1112, 1111, 3263, 3263, 3263, 3263,
     3263, 3263, 1110, 3181, 3264, 3265,  520, 3265, 3259, 3260,
     3181, 3260,  515, 1094, 3183, 1093, 3266, 3181, 1092, 1091,
     3260, 3183, 1090, 1089, 1088, 1087, 1086, 1085, 3183, 1084,
     1083, 1082, 1081, 1080, 1079, 1078, 3286, 1077, 3287, 1076,
     1073, 3288, 1072, 3289, 3265, 3265, 3265, 1071, 1070, 1069,
     1068, 3264, 3265, 3265, 3265, 1067, 1066, 1065, 3260, 3260,
     3260, 3265, 1064, 1063, 1062, 1061, 1060, 1059, 3260, 1058,

     3265, 3265, 1057, 3265, 1056, 1055, 1054, 3264, 3265, 1053,
     3265, 1052, 3265, 1051, 3260, 3260, 1050, 3260, 1049, 3265,
     1048, 1047, 1046, 1045, 1044, 1043, 3260, 3181, 1042, 1041,
     1040, 1039, 1038, 1035, 1034, 1033, 1032, 1031, 3183, 1030,
     1029, 1028, 1027, 1026, 1025, 1024, 3290, 1023, 3291, 1022,
     1021, 3292, 1020, 3293, 1012, 1003,  998,  997,  989,  988,
      983,  982,  971,  970,  969,  968,  967,  966, 3265, 3265,
     3265,  965,  964,  963,  962,  961,  960,  959, 3265,  668,
      668,  663,  663,  949,  948,  947,  946,  945,  944,  943,
      942,  941,  940,  939, 3265, 3265,  646, 3265,  938,  936,

      935,  934,  933,  932,  931,  930, 3265,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  215,  929,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  224,

      928,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  232,  927,  926,  923,  232,  232,  232,  232,  237,
      922,  237,  921,  237,  237,  237,  237,  237,  237,  237,
      237,  358,  920,  358,  358,  919,  358,  358,  358,  358,
      358,  358,  358,  361,  918,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  364,  917,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  367,  916,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  376,
      915,  376,  376,  914,  376,  376,  376,  376,  376,  376,
      376,  379,  379,  379,  379,  379,  379,  379,  379,  379,

      379,  379,  380,  913,  380,  380,  380,  380,  380,  380,
      380,  380,  390,  912,  911,  910,  390,  390,  390,  390,
      405,  909,  908,  907,  405,  405,  405,  405,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      254,  254,  516,  516,  358,  906,  358,  358,  905,  358,
      358,  358,  358,  358,  358,  358,  361,  904,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  367,  903,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      364,  902,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  638,  638,  638,  638,  638,  638,  638,  638,

      638,  638,  638,  638,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  376,  901,  376,  376,
      900,  376,  376,  376,  376,  376,  376,  376,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  380,
      899,  380,  380,  380,  380,  380,  380,  380,  380,  390,
      898,  897,  896,  390,  390,  390,  390,  405,  895,  894,
      893,  405,  405,  405,  405,  664,  664,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  224,
      892,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  790,  891,  790,  790,  790,  790,  790,  954,  890,

      889,  954,  954,  954,  788,  888,  885,  788,  788,  788,
     1099, 1099,  884, 1099, 1691,  883, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1691, 1691, 1694,  882, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1961,  881,
     1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961,
     1963,  880, 1963, 1963, 1963, 1963, 1963, 1963, 1963, 1963,
     1963, 1963,  879,  878,  877,  876,  875,  874,  873,  872,
      871,  870,  862,  853,  848,  847,  839,  838,  833,  832,
      821,  820,  819,  818,  817,  816,  815,  814,  813,  812,
      811,  810,  809,  808,  807,  806,  805,  804,  803,  800,

      799,  798,  797,  796,  520,  520,  515,  515,  779,  778,
      777,  776,  775,  773,  772,  771,  484,  482,  770,  769,
      768,  765,  764,  761,  756,  755,  750,  746,  743,  742,
      741,  740,  737,  736,  735,  734,  731,  730,  729,  728,
      727,  724,  723,  722,  716,  715,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  678,  677,
      676,  675,  674,  673,  672,  671,  398,  658,  657,  656,
      655,  654,  389,  385,  647,  383,  373,  646,  644,  637,
      636,  635,  632,  631,  276,  628,  623,  622,  617,  613,
      610,  609,  608,  607,  604,  603,  602,  601,  598,  597,

      596,  595,  594,  591,  590,  589,  583,  582,  579,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      545,  544,  543,  542,  541,  540,  539,  538,  535,  532,
      531,  530,  529,  528,  525,  238,  524,  523,  522,  521,
      502,  501,  237,  499,  498,  497,  496,  495,  488,  487,
      486,  485,  484,  483,  482,  481,  466,  456,  455,  452,
      289,  273,  250,  239,  398,  397,  396,  395,  394,  393,
      392,  391,  389,  388,  383,  378,  377,  374,  373,  360,
      359,  355,  339,  329,  328,  325,  289,  273,  239,  238,
     3351,  110,  110,   94,   94,   37, 3351, 3351, 3351, 3351,

     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351
    } ;

static yyconst flex_int16_t yy_chk[5690] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    6,    9,    9,    9,   21,    9,

        9,   15,   15,  914,    5,    6,   16,   16,   11,    5,
        6,   12,    9,   10,   10,   10,   17,   10,   10,   11,
       22,   43,   12,   18,   11,   17,   17,   12,   47,   47,
       10,   19,   18,   18,   20,   23,   23,   23,    9,   48,
       19,   19,   29,   20,   20,   23,    9,   24,   24,   24,
        9,   29,   29,   21,   40,   29,   10,   24,   15,   40,
       30,   84,   48,   16,   10,   51,   54,   84,   10,   30,
       30,   54,   57,   30,    9,   22,   57,   59,   43,   43,
       52,   61,   61,   51,   62,   54,   15,   74,   15,   62,
       23,   16,   10,   16,   85,   74,   52,   52,   59,   85,

       59,   59,   24,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   31,
       31,   31,   32,   32,   32,   33,   33,   33,   68,   44,

       31,   68,   63,   32,   44,   33,   34,   34,   34,   44,
       44,   53,  112,   88,  915,   53,   34,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   67,   69,   67,
       70,   64,   96,   78,   67,   69,   67,   96,   79,   69,
       70,   79,   69,   78,   31,   78,   71,   32,   71,  172,
       33,   63,   77,   33,   82,   44,   77,   82,   71,  172,
       33,   34,   44,   44,   34,   63,   77,   82,   88,   99,
      186,   34,   77,   63,   82,   33,  186,  101,   63,   63,
       33,   63,  101,  146,   72,  104,   34,   81,   81,  550,
       44,   34,   45,   64,   64,   72,  189,  112,   72,   81,

       83,   72,   81,  149,  149,   83,  100,  104,   64,  550,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       99,  150,   83,  215,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  154,  157,  127,  127,  127,  157,
      146,  146,  164,  164,  150,  147,  127,  156,  166,  161,
      916,  189,  154,  161,   45,  147,  147,  170,  165,   45,
      170,  176,   45,  156,  156,  173,   45,  173,   83,  176,
      290,   45,   55,   83,  215,  162,  100,  173,  290,   55,
      917,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  127,  181,  255,  255,  181,  162,   55,  162,  162,

       55,   55,  342,  237,   55,   55,   55,  165,  147,  147,
      166,  166,  185,  169,   55,  169,   55,  185,  287,  342,
      169,  165,  169,   55,  179,  166,   55,   55,  179,  165,
       55,   55,  287,   55,  165,  165,  147,  165,  179,  216,
      171,  280,   55,  187,  179,   55,   56,  171,  187,  237,
      332,  171,  280,   56,  171,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,  332,  210,  312,  312,  184,
      174,  210,  184,  180,   56,   56,  218,  918,   56,   56,
       56,  174,  184,  180,  174,  180,  219,  174,   56,  184,
      216,  183,  183,  221,  315,  315,  222,  381,  223,  276,

       56,   56,  327,  183,   56,   56,  183,   56,  254,  320,
      327,  789,  316,  320,  349,  316,   56,   66,   66,   66,
       66,  316,  345,   66,  349,   66,  337,  218,   66,  254,
      254,  345,  337,   66,   66,  341,  258,  219,  258,  789,
      339,  258,   66,  258,  221,   66,   66,  222,   66,  223,
      276,   66,  339,  339,  341,  254,  254,  364,  258,  258,
      258,   66,  346,  384,   66,  159,  346,  352,  258,  469,
      352,  373,  833,  384,  159,  159,  159,  159,  159,  159,
      159,  159,  381,  362,  258,  258,  469,  258,  362,  833,
      159,  259,  259,  259,  407,  407,  258,  159,  159,  159,

      459,  259,  417,  919,  260,  260,  260,  159,  364,  159,
      417,  439,  439,  392,  260,  459,  159,  259,  259,  392,
      259,  464,  373,  159,  159,  392,  159,  464,  392,  259,
      260,  260,  392,  260,  392,  159,  442,  442,  159,  160,
      447,  473,  260,  478,  447,  473,  478,  920,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  454,  921,
      472,  160,  160,  160,  489,  489,  454,  252,  256,  472,
      256,  160,  466,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  443,  466,  466,  443,  160,  160,  683,

      160,  468,  443,  252,  475,  265,  265,  265,  859,  160,
      168,  168,  168,  168,  475,  265,  168,  859,  168,  683,
      468,  168,  922,  266,  266,  266,  168,  168,  489,  585,
      585,  265,  265,  266,  265,  168,  492,  492,  168,  168,
      264,  168,  264,  265,  168,  264,  924,  264,  862,  266,
      266,  862,  266,  925,  168,  494,  494,  168,  211,  718,
      718,  266,  264,  264,  264,  842,  512,  503,  278,  503,
      512,  517,  264,  842,  503,  517,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  831,  831,  264,  264,
      492,  264,  408,  503,  408,  503,  549,  408,  529,  408,

      264,  503,  529,  549,  549,  549,  558,  928,  929,  494,
      558,  490,  490,  490,  408,  408,  408,  278,  551,  554,
      211,  883,  551,  883,  408,  211,  551,  554,  211,  551,
      554,  278,  211,  554,  638,  638,  564,  211,  225,  278,
      408,  408,  557,  408,  278,  278,  564,  278,  930,  557,
      557,  363,  408,  564,  557,  557,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  490,  931,  933,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  566,
      625,  934,  935,  566,  409,  409,  409,  660,  638,  936,
      625,  660,  665,  566,  409,  682,  665,  410,  410,  410,

      225,  938,  682,  682,  682,  225,  758,  410,  225,  853,
      409,  409,  225,  409,  561,  939,  758,  225,  226,  226,
      226,  363,  409,  410,  410,  691,  410,  853,  940,  691,
      368,  561,  941,  561,  561,  410,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  942,  943,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  504,  944,
      504,  945,  947,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  226,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  413,  697,  413,  641,  641,  413,
      948,  413,  247,  247,  247,  697,  949,  247,  247,  247,

      368,  684,  697,  247,  953,  684,  413,  413,  413,  684,
      505,  958,  684,  505,  505,  505,  413,  959,  247,  247,
      247,  567,  960,  247,  247,  961,  247,  700,  639,  639,
      639,  247,  413,  413,  962,  413,  505,  247,  251,  505,
      505,  641,  505,  963,  413,  964,  965,  251,  251,  251,
      251,  251,  251,  251,  251,  414,  414,  414,  567,  966,
      567,  643,  643,  967,  700,  414,  700,  968,  969,  970,
      251,  251,  251,  567,  971,  415,  415,  415,  687,  700,
      251,  414,  414,  639,  414,  415,  687,  972,  973,  687,
      974,  975,  687,  414,  563,  797,  251,  251,  563,  251,

      563,  415,  415,  797,  415,  563,  797,  563,  251,  253,
      976,  694,  977,  415,  978,  643,  253,  979,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  694,  980,
      694,  694,  690,  981,  981,  982,  984,  253,  253,  690,
      690,  253,  253,  253,  690,  690,  985,  508,  983,  508,
      986,  253,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  987,  253,  253,  983,  988,  253,  253,  989,
      253,  699,  990,  991,  993,  699,  509,  509,  992,  253,
      262,  994,  659,  659,  995,  699,  992,  996,  997,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  509,

      509,  509,  998,  999, 1000,  659,  659,  659, 1001,  509,
     1002, 1004,  262,  262,  262,  659, 1005, 1003, 1006,  664,
      664,  664,  262, 1007, 1008,  509,  509, 1010,  509,  664,
     1011,  659,  659, 1013,  659, 1003,  696,  509,  262,  262,
      696,  262,  696,  659, 1009,  664,  664,  696,  664,  696,
      262,  263, 1012, 1009, 1014, 1012, 1015,  664,  263, 1016,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
     1017,  927, 1018, 1019, 1020, 1021,  927, 1022, 1023,  263,
      263,  927,  927,  263,  263,  263, 1024, 1025, 1026, 1027,
     1030, 1032, 1034,  263,  510,  510,  510,  510,  510,  510,

      510,  510,  510,  510, 1035,  263,  263, 1036, 1037,  263,
      263, 1033,  263, 1033, 1038, 1039, 1040, 1041, 1044, 1045,
     1046,  263,  299, 1047,  299, 1048, 1050, 1052, 1053, 1054,
      299,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780, 1055, 1056, 1057, 1058, 1059, 1060, 1061,  299,  299,
      299,  299,  299,  299,  299,  299,  299, 1062, 1063,  299,
     1064,  299,  299,  299, 1065,  299,  299,  299,  299,  299,
      299,  369,  369,  369,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781, 1066, 1067, 1068, 1069, 1070,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782, 1071,
     1072, 1074,  516, 1075, 1078, 1079, 1080, 1081, 1077,  516,
     1083, 1084, 1085, 1077, 1086, 1087,  369,  406, 1077, 1077,
     1089, 1090, 1091, 1093, 1094, 1096,  406,  406,  406,  406,
      406,  406,  406,  406,  516,  516,  516, 1095, 1097,  516,
     1099, 1095, 1101, 1102,  516, 1103, 1101, 1107, 1109,  406,
      406,  406, 1110, 1111,  785,  785,  785, 1112, 1113,  406,
      516,  516, 1108,  516,  785, 1108, 1114,  516, 1099, 1115,
     1117, 1118,  516, 1119, 1121,  406,  406, 1122,  406, 1124,
      785,  785, 1125,  785, 1126, 1127, 1128,  406,  412, 1129,

     1130, 1131,  785, 1132, 1133, 1134, 1135,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783, 1136, 1137, 1138,
      412,  412,  412, 1139,  786,  786,  786, 1140, 1141, 1142,
      412, 1143, 1144, 1145,  786, 1146, 1147, 1148, 1149, 1150,
     1151, 1152,  788,  788,  788, 1153,  412,  412, 1154,  412,
      786,  786,  788,  786, 1155, 1156, 1160, 1154,  412,  426,
     1161,  426,  786, 1162, 1163, 1164, 1165,  426,  788,  788,
     1157,  788, 1157, 1166, 1167, 1157, 1166, 1157, 1168, 1169,
      788, 1170, 1172, 1173, 1174,  426,  426,  426,  426,  426,

      426,  426,  426,  426, 1175, 1176,  426, 1178,  426,  426,
      426, 1179,  426,  426,  426,  426,  426,  426,  493,  493,
      493, 1180, 1181, 1182, 1183, 1185,  790, 1186, 1187, 1188,
     1189, 1190, 1191,  790, 1192, 1193,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1194, 1195,  790,  790,
      790, 1198, 1199,  790, 1202, 1203, 1204, 1205,  790, 1206,
     1194, 1207, 1208,  493,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  790,  790, 1209,  790, 1212, 1213,
     1214,  790,  507,  507,  507, 1215,  790,  507,  507,  507,

      793, 1216,  793,  507, 1217,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793, 1218, 1219, 1220,  507,  507,
      507, 1222, 1223,  507,  507, 1224,  507, 1225, 1226, 1227,
     1229,  507, 1230, 1231, 1232, 1233, 1234,  507,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  784, 1235,
      784, 1237, 1238,  784, 1239,  784,  511, 1240,  511, 1242,
     1244,  511,  511,  511, 1245, 1246, 1248,  511, 1250, 1251,
      784,  784,  784, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
      784, 1259,  511, 1261,  511, 1260, 1262,  511,  511, 1260,
      511, 1265, 1266, 1268, 1264,  511,  784,  784, 1264,  784,

     1269,  511,  642,  642,  642, 1271, 1272, 1273,  784, 1274,
      791, 1275,  791, 1276, 1277,  791, 1278,  791, 1279, 1280,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
     1281, 1282,  791,  791,  791, 1283,  792,  792,  792, 1284,
     1285, 1286,  791, 1287, 1288, 1289,  792, 1290, 1291, 1292,
      794,  794,  794, 1293, 1294, 1295, 1296,  642,  791,  791,
      794,  791,  792,  792, 1297,  792, 1298, 1299, 1300, 1302,
      791, 1303, 1307,  950,  792,  950,  794,  794,  950,  794,
      950,  951,  951,  951, 1301, 1304, 1308, 1304,  794, 1309,
     1304,  951, 1304, 1301, 1310,  950,  950,  950, 1311,  952,

      952,  952, 1312, 1313, 1314,  950, 1313,  951,  951,  952,
      951, 1315, 1316,  954,  954,  954, 1317, 1319, 1320,  951,
     1321,  950,  950,  954,  950,  952,  952, 1322,  952, 1323,
     1325, 1326, 1327,  950, 1328, 1329,  955,  952,  955,  954,
      954,  955,  954,  955,  956,  956,  956, 1330, 1332, 1333,
     1334,  954, 1335, 1336,  956, 1337, 1338, 1339,  955,  955,
      955, 1340,  957,  957,  957, 1341, 1342, 1345,  955, 1346,
      956,  956,  957,  956, 1349, 1350, 1351, 1352, 1353, 1341,
     1354, 1355,  956, 1092,  955,  955, 1356,  955,  957,  957,
     1359,  957, 1360, 1361, 1362, 1363,  955, 1364, 1365, 1366,

      957, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1100, 1367, 1100, 1369, 1370, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1371, 1159, 1159, 1159,
     1159, 1159, 1249, 1372, 1373, 1159, 1374, 1376, 1377, 1378,
     1379, 1380, 1159, 1092, 1159, 1159, 1381, 1159, 1159, 1382,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1306, 1306, 1306, 1306, 1306, 1384, 1385, 1386, 1306, 1387,
     1389, 1391, 1392, 1393, 1395, 1306, 1396, 1306, 1306, 1397,
     1306, 1306, 1398, 1399, 1401, 1400, 1402, 1403, 1405, 1405,

     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1407, 1408,
     1409, 1410, 1249, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1404, 1411, 1404, 1412, 1413, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1414, 1415,
     1416, 1417, 1418, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
     1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1421, 1435,
     1436, 1437, 1438, 1439, 1440, 1441, 1440, 1442, 1443, 1444,
     1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
     1452, 1454, 1455, 1452, 1456, 1457, 1458, 1459, 1461, 1457,

     1462, 1452, 1463, 1464, 1466, 1463, 1467, 1452, 1452, 1452,
     1465, 1465, 1468, 1469, 1470, 1471, 1472, 1469, 1473, 1474,
     1475, 1476, 1477, 1478, 1479, 1481, 1482, 1483, 1484, 1485,
     1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
     1497, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1507, 1508,
     1509, 1510, 1511, 1512, 1515, 1519, 1520, 1521, 1523, 1524,
     1525, 1526, 1527, 1529, 1530, 1534, 1537, 1538, 1539, 1541,
     1543, 1544, 1545, 1546, 1548, 1549, 1550, 1551, 1552, 1553,
     1554, 1555, 1557, 1558, 1559, 1560, 1562, 1563, 1561, 1564,
     1565, 1566, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,

     1548, 1548, 1561, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
     1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1580, 1582,
     1583, 1584, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
     1592, 1593, 1592, 1594, 1595, 1592, 1596, 1597, 1598, 1599,
     1601, 1597, 1602, 1592, 1603, 1604, 1606, 1603, 1607, 1592,
     1592, 1592, 1605, 1605, 1608, 1609, 1610, 1611, 1612, 1609,
     1613, 1614, 1615, 1616, 1617, 1618, 1619, 1621, 1622, 1623,
     1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
     1634, 1635, 1637, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
     1647, 1648, 1649, 1650, 1651, 1652, 1655, 1659, 1660, 1661,

     1663, 1664, 1665, 1666, 1667, 1669, 1670, 1674, 1677, 1678,
     1679, 1681, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1692,
     1693, 1695, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1698, 1699, 1701, 1702, 1705, 1706, 1707, 1710,
     1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
     1721, 1712, 1722, 1723, 1725, 1726, 1728, 1729, 1730, 1731,
     1732, 1733, 1734, 1723, 1735, 1736, 1737, 1738, 1739, 1740,
     1741, 1742, 1743, 1744, 1745, 1746, 1747, 1741, 1748, 1749,
     1750, 1751, 1752, 1753, 1693, 1754, 1755, 1759, 1760, 1761,

     1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
     1772, 1773, 1775, 1767, 1776, 1777, 1778, 1781, 1782, 1783,
     1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
     1794, 1795, 1796, 1797, 1798, 1800, 1801, 1804, 1805, 1806,
     1807, 1808, 1810, 1812, 1813, 1815, 1816, 1818, 1819, 1820,
     1821, 1822, 1823, 1825, 1826, 1828, 1830, 1831, 1832, 1833,
     1834, 1835, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
     1845, 1846, 1847, 1848, 1849, 1850, 1841, 1851, 1852, 1854,
     1855, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1852, 1864,
     1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,

     1875, 1876, 1870, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
     1884, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
     1897, 1898, 1899, 1900, 1901, 1902, 1904, 1896, 1905, 1906,
     1907, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
     1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1929,
     1930, 1933, 1934, 1935, 1936, 1937, 1939, 1941, 1942, 1944,
     1945, 1947, 1948, 1949, 1950, 1951, 1952, 1954, 1955, 1957,
     1959, 1960, 1962, 1964, 1965, 1966, 1968, 1970, 1971, 1972,
     1975, 1978, 1980, 1978, 1981, 1982, 1978, 1983, 1984, 1985,
     1975, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,

     1995, 1996, 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005,
     2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
     2016, 2018, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
     2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2041,
     2042, 2044, 2045, 2046, 2048, 2049, 2050, 1964, 2051, 2052,
     2053, 2054, 2055, 2056, 2057, 2059, 2062, 2066, 2070, 2073,
     2075, 2079, 2080, 2082, 2083, 2084, 2085, 2086, 2090, 2092,
     2090, 2093, 2094, 2090, 2095, 2096, 2097, 2098, 2099, 2100,
     2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
     2111, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121,

     2122, 2123, 2124, 2125, 2126, 2127, 2128, 2130, 2132, 2133,
     2134, 2135, 2136, 2137, 2138, 2139, 2141, 2142, 2143, 2144,
     2145, 2146, 2147, 2148, 2149, 2153, 2154, 2156, 2157, 2158,
     2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
     2171, 2174, 2178, 2182, 2185, 2187, 2191, 2193, 2194, 2195,
     2196, 2197, 2198, 2199, 2200, 2201, 2202, 2204, 2205, 2206,
     2207, 2208, 2209, 2210, 2211, 2212, 2213, 2215, 2216, 2218,
     2220, 2221, 2222, 2223, 2225, 2227, 2228, 2229, 2230, 2231,
     2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241,
     2242, 2243, 2244, 2246, 2247, 2248, 2249, 2248, 2250, 2251,

     2252, 2255, 2256, 2257, 2259, 2260, 2261, 2262, 2263, 2264,
     2265, 2266, 2268, 2271, 2275, 2276, 2277, 2278, 2279, 2280,
     2281, 2282, 2283, 2284, 2285, 2286, 2287, 2289, 2290, 2291,
     2292, 2293, 2294, 2295, 2296, 2297, 2298, 2300, 2301, 2303,
     2305, 2306, 2307, 2308, 2310, 2312, 2313, 2314, 2315, 2316,
     2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326,
     2327, 2328, 2329, 2331, 2332, 2333, 2334, 2333, 2335, 2336,
     2337, 2340, 2341, 2342, 2344, 2345, 2346, 2347, 2348, 2349,
     2350, 2351, 2353, 2356, 2360, 2361, 2362, 2363, 2364, 2365,
     2366, 2367, 2368, 2369, 2373, 2374, 2375, 2376, 2376, 2376,

     2377, 2376, 2376, 2378, 2379, 2380, 2381, 2382, 2385, 2388,
     2391, 2392, 2393, 2395, 2396, 2397, 2376, 2398, 2399, 2400,
     2401, 2382, 2403, 2404, 2406, 2407, 2382, 2409, 2382, 2410,
     2411, 2412, 2413, 2414, 2416, 2417, 2418, 2420, 2423, 2424,
     2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2435,
     2436, 2437, 2438, 2439, 2443, 2444, 2445, 2446, 2446, 2446,
     2447, 2446, 2446, 2448, 2449, 2450, 2451, 2452, 2455, 2458,
     2461, 2462, 2463, 2465, 2466, 2467, 2446, 2468, 2469, 2470,
     2471, 2452, 2473, 2474, 2476, 2477, 2452, 2479, 2452, 2480,
     2481, 2482, 2483, 2484, 2486, 2487, 2488, 2490, 2493, 2494,

     2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504,
     2507, 2508, 2510, 2511, 2513, 2514, 2513, 2515, 2503, 2516,
     2517, 2514, 2518, 2517, 2522, 2524, 2517, 2525, 2526, 2527,
     2529, 2530, 2518, 2531, 2532, 2533, 2534, 2535, 2536, 2537,
     2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2549,
     2550, 2551, 2552, 2553, 2555, 2556, 2557, 2558, 2560, 2561,
     2562, 2564, 2565, 2566, 2567, 2570, 2571, 2573, 2574, 2573,
     2575, 2576, 2577, 2578, 2574, 2577, 2582, 2584, 2577, 2585,
     2586, 2587, 2589, 2578, 2590, 2591, 2592, 2593, 2594, 2595,
     2596, 2597, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606,

     2607, 2609, 2610, 2611, 2612, 2613, 2615, 2616, 2617, 2618,
     2620, 2621, 2622, 2623, 2624, 2625, 2626, 2628, 2629, 2630,
     2631, 2632, 2633, 2634, 2624, 2635, 2625, 2636, 2638, 2639,
     2640, 2641, 2642, 2625, 2625, 2625, 2625, 2625, 2625, 2625,
     2625, 2625, 2625, 2637, 2643, 2644, 2645, 2646, 2647, 2648,
     2651, 2652, 2653, 2637, 2654, 2655, 2656, 2657, 2659, 2660,
     2661, 2662, 2663, 2664, 2665, 2666, 2669, 2670, 2671, 2674,
     2675, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685,
     2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2625,
     2695, 2696, 2697, 2689, 2698, 2699, 2700, 2703, 2704, 2705,

     2706, 2707, 2708, 2709, 2711, 2712, 2713, 2714, 2715, 2716,
     2717, 2718, 2721, 2722, 2723, 2726, 2727, 2730, 2731, 2731,
     2731, 2734, 2735, 2736, 2737, 2739, 2740, 2734, 2730, 2741,
     2742, 2743, 2744, 2745, 2746, 2730, 2730, 2730, 2730, 2730,
     2730, 2730, 2730, 2730, 2730, 2747, 2748, 2749, 2752, 2753,
     2754, 2755, 2758, 2759, 2760, 2761, 2762, 2749, 2763, 2765,
     2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776,
     2778, 2779, 2780, 2731, 2781, 2782, 2784, 2785, 2786, 2787,
     2788, 2789, 2790, 2791, 2792, 2793, 2794, 2797, 2798, 2799,
     2800, 2730, 2732, 2803, 2804, 2805, 2794, 2806, 2807, 2808,

     2810, 2732, 2812, 2732, 2813, 2814, 2815, 2816, 2817, 2818,
     2732, 2732, 2732, 2732, 2732, 2732, 2732, 2732, 2819, 2820,
     2821, 2823, 2823, 2823, 2826, 2827, 2732, 2830, 2830, 2828,
     2829, 2829, 2829, 2732, 2732, 2732, 2827, 2839, 2840, 2841,
     2832, 2842, 2844, 2732, 2845, 2732, 2846, 2848, 2828, 2849,
     2850, 2832, 2732, 2851, 2852, 2828, 2853, 2854, 2855, 2732,
     2732, 2856, 2732, 2857, 2858, 2859, 2860, 2861, 2863, 2861,
     2862, 2732, 2862, 2862, 2732, 2733, 2823, 2828, 2864, 2833,
     2865, 2832, 2832, 2832, 2733, 2829, 2733, 2866, 2867, 2868,
     2833, 2832, 2871, 2733, 2733, 2733, 2733, 2733, 2733, 2733,

     2733, 2733, 2733, 2872, 2873, 2874, 2875, 2832, 2832, 2876,
     2832, 2878, 2879, 2880, 2882, 2883, 2733, 2733, 2733, 2832,
     2833, 2833, 2833, 2884, 2886, 2887, 2733, 2888, 2889, 2890,
     2833, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2901,
     2902, 2837, 2733, 2733, 2903, 2733, 2833, 2833, 2838, 2833,
     2904, 2899, 2837, 2899, 2733, 2831, 2905, 2906, 2833, 2838,
     2900, 2909, 2900, 2900, 2910, 2911, 2831, 2912, 2913, 2914,
     2918, 2915, 2915, 2915, 2831, 2921, 2831, 2922, 2926, 2831,
     2927, 2831, 2837, 2837, 2837, 2930, 2931, 2932, 2933, 2838,
     2838, 2838, 2837, 2934, 2923, 2935, 2831, 2831, 2831, 2838,

     2920, 2928, 2929, 2925, 2920, 2923, 2831, 2925, 2837, 2837,
     2937, 2837, 2928, 2929, 2938, 2838, 2838, 2939, 2838, 2940,
     2837, 2941, 2831, 2831, 2942, 2831, 2915, 2838, 2944, 2945,
     2946, 2947, 2949, 2950, 2831, 2834, 2834, 2834, 2834, 2834,
     2834, 2834, 2834, 2834, 2834, 2951, 2952, 2919, 2953, 2954,
     2834, 2834, 2834, 2834, 2834, 2834, 2955, 2957, 2919, 2958,
     2959, 2960, 2961, 2962, 2963, 2919, 2919, 2966, 2968, 2969,
     2970, 2971, 2973, 2974, 2975, 2976, 2834, 2834, 2834, 2834,
     2834, 2834, 2836, 2977, 2978, 2980, 2981, 2982, 2919, 2919,
     2919, 2983, 2985, 2836, 2986, 2987, 2988, 2989, 2919, 2990,

     2991, 2836, 2993, 2836, 2994, 2995, 2836, 2996, 2836, 2997,
     2998, 2999, 3005, 3010, 2919, 2919, 3011, 2919, 3015, 3016,
     3013, 3018, 3020, 2836, 2836, 2836, 2919, 3011, 3012, 3012,
     3012, 3013, 3021, 2836, 3013, 3022, 3024, 3025, 3026, 3027,
     3029, 3030, 3031, 3030, 3032, 3033, 3032, 3034, 3035, 2836,
     2836, 3036, 2836, 3037, 3039, 3041, 3042, 3003, 3043, 3044,
     3045, 2836, 2924, 3047, 3049, 3050, 3051, 3053, 3003, 3054,
     3055, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924,
     2924, 3056, 3058, 3012, 3060, 3062, 2924, 2924, 2924, 2924,
     2924, 2924, 3063, 3064, 2924, 2924, 2924, 3065, 3003, 3003,

     3003, 3059, 3066, 3059, 2924, 3061, 3068, 3061, 3003, 3070,
     3071, 3073, 2924, 2924, 2924, 2924, 2924, 2924, 3072, 3004,
     2924, 2924, 3072, 2924, 3003, 3003, 3008, 3003, 3074, 3075,
     3004, 3076, 2924, 3002, 3077, 3076, 3003, 3008, 3078, 3009,
     3075, 3083, 3079, 3087, 3002, 3088, 3089, 3080, 3080, 3080,
     3009, 3093, 3002, 3079, 3002, 3095, 3096, 3002, 3097, 3002,
     3004, 3004, 3004, 3098, 3085, 3085, 3085, 3008, 3008, 3008,
     3004, 3099, 3100, 3101, 3002, 3002, 3002, 3008, 3102, 3103,
     3009, 3009, 3009, 3104, 3002, 3105, 3004, 3004, 3106, 3004,
     3009, 3107, 3108, 3008, 3008, 3111, 3008, 3084, 3004, 3113,

     3002, 3002, 3080, 3002, 3114, 3008, 3009, 3009, 3084, 3009,
     3118, 3084, 3002, 3007, 3120, 3121, 3122, 3123, 3009, 3085,
     3124, 3125, 3086, 3126, 3007, 3127, 3128, 3129, 3130, 3131,
     3132, 3133, 3007, 3136, 3007, 3137, 3141, 3007, 3145, 3007,
     3086, 3086, 3086, 3086, 3086, 3086, 3086, 3086, 3086, 3086,
     3138, 3138, 3138, 3147, 3007, 3007, 3007, 3148, 3150, 3151,
     3152, 3154, 3155, 3157, 3007, 3158, 3159, 3160, 3161, 3162,
     3163, 3165, 3166, 3168, 3169, 3142, 3170, 3172, 3173, 3175,
     3007, 3007, 3176, 3007, 3177, 3178, 3179, 3180, 3184, 3184,
     3182, 3193, 3007, 3142, 3142, 3142, 3142, 3142, 3142, 3142,

     3142, 3142, 3142, 3181, 3195, 3138, 3143, 3196, 3197, 3182,
     3183, 3183, 3183, 3198, 3181, 3143, 3182, 3143, 3199, 3200,
     3201, 3202, 3203, 3205, 3143, 3143, 3143, 3143, 3143, 3143,
     3143, 3143, 3206, 3207, 3209, 3210, 3211, 3212, 3182, 3213,
     3143, 3214, 3215, 3216, 3217, 3219, 3220, 3143, 3143, 3143,
     3186, 3221, 3221, 3221, 3224, 3227, 3226, 3143, 3228, 3143,
     3226, 3186, 3232, 3231, 3229, 3183, 3143, 3231, 3233, 3234,
     3235, 3236, 3237, 3143, 3143, 3229, 3143, 3239, 3241, 3242,
     3234, 3243, 3244, 3187, 3246, 3143, 3247, 3248, 3143, 3144,
     3249, 3186, 3186, 3186, 3187, 3251, 3253, 3254, 3144, 3255,

     3144, 3186, 3256, 3258, 3262, 3267, 3221, 3144, 3144, 3144,
     3144, 3144, 3144, 3144, 3144, 3144, 3144, 3186, 3186, 3268,
     3186, 3269, 3270, 3271, 3187, 3187, 3187, 3272, 3273, 3186,
     3144, 3144, 3144, 3275, 3187, 3191, 3276, 3278, 3279, 3280,
     3144, 3281, 3282, 3284, 3285, 3286, 3191, 3287, 3288, 3286,
     3187, 3187, 3289, 3187, 3290, 3192, 3144, 3144, 3290, 3144,
     3291, 3292, 3187, 3289, 3293, 3294, 3192, 3296, 3144, 3185,
     3297, 3298, 3299, 3300, 3301, 3293, 3191, 3191, 3191, 3303,
     3185, 3304, 3305, 3306, 3307, 3308, 3191, 3309, 3185, 3310,
     3185, 3311, 3312, 3185, 3313, 3185, 3192, 3192, 3192, 3314,

     3315, 3316, 3191, 3191, 3318, 3191, 3192, 3319, 3320, 3321,
     3185, 3185, 3185, 3322, 3191, 3324, 3325, 3326, 3327, 3330,
     3185, 3331, 3192, 3192, 3332, 3192, 3335, 3336, 3339, 3342,
     3343, 3344, 3345, 3346, 3192, 3347, 3185, 3185,  913, 3185,
      912,  911,  910,  909,  908,  907,  906,  905, 3185, 3188,
     3188, 3188, 3188, 3188, 3188, 3188, 3188, 3188, 3188,  904,
      903, 3225,  902,  900, 3188, 3188, 3188, 3188, 3188, 3188,
      898,  897, 3225,  896,  895,  894,  891,  890,  889, 3225,
     3225,  888,  887,  886,  885,  884,  882,  880,  877,  876,
     3188, 3188, 3188, 3188, 3188, 3188, 3190,  875,  874,  873,

     3260,  872, 3225, 3225, 3225,  871,  870, 3190,  869,  868,
      867, 3260, 3225,  866,  865, 3190,  864, 3190,  863,  861,
     3190,  860, 3190,  858,  857,  856,  855,  854, 3225, 3225,
      852, 3225,  851,  850,  849,  848,  847, 3190, 3190, 3190,
     3225, 3260, 3260, 3260,  846,  845,  844, 3190,  843,  841,
      840, 3260,  839,  838,  837,  836,  835,  834,  832,  830,
      829,  828,  827, 3190, 3190,  826, 3190, 3260, 3260,  825,
     3260, 3261,  824,  823,  822, 3190, 3230,  821,  820, 3260,
      819,  818, 3261,  817,  816, 3230, 3230, 3230, 3230, 3230,
     3230, 3230, 3230, 3230, 3230,  815,  814,  813,  812,  811,

     3230, 3230, 3230, 3230, 3230, 3230,  810,  809, 3230, 3230,
     3230,  808, 3261, 3261, 3261,  807,  806,  805, 3230,  804,
      803,  802, 3261,  801,  800,  799, 3230, 3230, 3230, 3230,
     3230, 3230,  798, 3265, 3230, 3230,  795, 3230, 3261, 3261,
     3266, 3261,  787,  779, 3265,  778, 3230, 3259,  777,  776,
     3261, 3266,  775,  773,  772,  771,  770,  769, 3259,  768,
      767,  766,  765,  764,  763,  762, 3259,  761, 3259,  759,
      757, 3259,  756, 3259, 3265, 3265, 3265,  755,  754,  753,
      752, 3266, 3266, 3266, 3265,  751,  750,  749, 3259, 3259,
     3259, 3266,  748,  747,  746,  745,  744,  743, 3259,  742,

     3265, 3265,  741, 3265,  740,  739,  738, 3266, 3266,  736,
     3266,  735, 3265,  734, 3259, 3259,  732, 3259,  731, 3266,
      730,  728,  727,  726,  725,  724, 3259, 3264,  723,  722,
      721,  720,  719,  717,  716,  715,  714,  713, 3264,  712,
      711,  710,  708,  707,  706,  705, 3264,  704, 3264,  703,
      702, 3264,  701, 3264,  698,  695,  693,  692,  689,  688,
      686,  685,  681,  680,  679,  678,  677,  676, 3264, 3264,
     3264,  675,  674,  673,  672,  671,  670,  669, 3264,  667,
      666,  662,  661,  658,  657,  656,  655,  654,  653,  652,
      651,  650,  649,  648, 3264, 3264,  645, 3264,  644,  637,

      636,  635,  634,  633,  632,  631, 3264, 3352, 3352, 3352,
     3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3353,
     3353, 3353, 3353, 3353, 3353, 3353, 3353, 3353, 3353, 3353,
     3353, 3354, 3354, 3354, 3354, 3354, 3354, 3354, 3354, 3354,
     3354, 3354, 3354, 3355, 3355, 3355, 3355, 3355, 3355, 3355,
     3355, 3355, 3355, 3355, 3355, 3356, 3356, 3356, 3356, 3356,
     3356, 3356, 3356, 3356, 3356, 3356, 3356, 3357, 3357, 3357,
     3357, 3357, 3357, 3357, 3357, 3357, 3357, 3357, 3357, 3358,
     3358, 3358, 3358, 3358, 3358, 3358, 3358, 3358, 3358, 3358,
     3358, 3359, 3359, 3359, 3359, 3359, 3359, 3359, 3359, 3359,

     3359, 3359, 3359, 3360, 3360, 3360, 3360, 3360, 3360, 3360,
     3360, 3360, 3360, 3360, 3360, 3361, 3361, 3361, 3361, 3361,
     3361, 3361, 3361, 3361, 3361, 3361, 3361, 3362, 3362, 3362,
     3362, 3362, 3362, 3362, 3362, 3362, 3362, 3362, 3362, 3363,
     3363, 3363, 3363, 3363, 3363, 3363, 3363, 3363, 3363, 3363,
     3363, 3364, 3364, 3364, 3364, 3364, 3364, 3364, 3364, 3364,
     3364, 3364, 3364, 3365, 3365, 3365, 3365, 3365, 3365, 3365,
     3365, 3365, 3365, 3365, 3365, 3366, 3366, 3366, 3366, 3366,
     3366, 3366, 3366, 3366, 3366, 3366, 3366, 3367,  630, 3367,
     3367, 3367, 3367, 3367, 3367, 3367, 3367, 3367, 3367, 3368,

      629, 3368, 3368, 3368, 3368, 3368, 3368, 3368, 3368, 3368,
     3368, 3369,  628,  626,  624, 3369, 3369, 3369, 3369, 3370,
      623, 3370,  622, 3370, 3370, 3370, 3370, 3370, 3370, 3370,
     3370, 3371,  621, 3371, 3371,  620, 3371, 3371, 3371, 3371,
     3371, 3371, 3371, 3372,  619, 3372, 3372, 3372, 3372, 3372,
     3372, 3372, 3372, 3372, 3372, 3373,  618, 3373, 3373, 3373,
     3373, 3373, 3373, 3373, 3373, 3373, 3373, 3374,  617, 3374,
     3374, 3374, 3374, 3374, 3374, 3374, 3374, 3374, 3374, 3375,
      616, 3375, 3375,  615, 3375, 3375, 3375, 3375, 3375, 3375,
     3375, 3376, 3376, 3376, 3376, 3376, 3376, 3376, 3376, 3376,

     3376, 3376, 3377,  614, 3377, 3377, 3377, 3377, 3377, 3377,
     3377, 3377, 3378,  613,  612,  611, 3378, 3378, 3378, 3378,
     3379,  610,  609,  608, 3379, 3379, 3379, 3379, 3380, 3380,
     3380, 3380, 3380, 3380, 3380, 3380, 3380, 3380, 3380, 3380,
     3381, 3381, 3382, 3382, 3383,  607, 3383, 3383,  606, 3383,
     3383, 3383, 3383, 3383, 3383, 3383, 3384,  605, 3384, 3384,
     3384, 3384, 3384, 3384, 3384, 3384, 3384, 3384, 3385,  603,
     3385, 3385, 3385, 3385, 3385, 3385, 3385, 3385, 3385, 3385,
     3386,  602, 3386, 3386, 3386, 3386, 3386, 3386, 3386, 3386,
     3386, 3386, 3387, 3387, 3387, 3387, 3387, 3387, 3387, 3387,

     3387, 3387, 3387, 3387, 3388, 3388, 3388, 3388, 3388, 3388,
     3388, 3388, 3388, 3388, 3388, 3388, 3389,  601, 3389, 3389,
      599, 3389, 3389, 3389, 3389, 3389, 3389, 3389, 3390, 3390,
     3390, 3390, 3390, 3390, 3390, 3390, 3390, 3390, 3390, 3391,
      598, 3391, 3391, 3391, 3391, 3391, 3391, 3391, 3391, 3392,
      597,  595,  594, 3392, 3392, 3392, 3392, 3393,  593,  592,
      591, 3393, 3393, 3393, 3393, 3394, 3394, 3395, 3395, 3395,
     3395, 3395, 3395, 3395, 3395, 3395, 3395, 3395, 3395, 3396,
      590, 3396, 3396, 3396, 3396, 3396, 3396, 3396, 3396, 3396,
     3396, 3397,  589, 3397, 3397, 3397, 3397, 3397, 3398,  588,

      587, 3398, 3398, 3398, 3399,  586,  584, 3399, 3399, 3399,
     3400, 3400,  583, 3400, 3401,  582, 3401, 3401, 3401, 3401,
     3401, 3401, 3401, 3401, 3401, 3401, 3402,  581, 3402, 3402,
     3402, 3402, 3402, 3402, 3402, 3402, 3402, 3402, 3403,  580,
     3403, 3403, 3403, 3403, 3403, 3403, 3403, 3403, 3403, 3403,
     3404,  579, 3404, 3404, 3404, 3404, 3404, 3404, 3404, 3404,
     3404, 3404,  578,  577,  575,  574,  573,  572,  571,  570,
      569,  568,  565,  562,  560,  559,  556,  555,  553,  552,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  533,  532,  531,  530,  528,

      527,  526,  525,  522,  519,  518,  514,  513,  499,  498,
      497,  496,  495,  488,  487,  486,  484,  482,  481,  480,
      479,  477,  476,  474,  471,  470,  467,  465,  463,  462,
      461,  460,  458,  457,  456,  455,  452,  451,  450,  449,
      448,  446,  445,  444,  441,  440,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  425,  424,
      423,  422,  421,  420,  419,  418,  398,  397,  396,  395,
      394,  393,  389,  387,  385,  383,  375,  372,  370,  355,
      354,  353,  351,  350,  348,  347,  344,  343,  340,  338,
      336,  335,  334,  333,  331,  330,  329,  328,  325,  324,

      323,  322,  321,  319,  318,  317,  314,  313,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      298,  297,  296,  295,  294,  293,  292,  291,  288,  286,
      284,  283,  282,  281,  279,  277,  275,  273,  272,  271,
      246,  244,  238,  231,  230,  229,  228,  227,  208,  207,
      206,  205,  201,  199,  195,  188,  182,  178,  177,  175,
      167,  163,  158,  153,  143,  141,  140,  139,  138,  137,
      136,  135,  130,  128,  124,  108,  107,  103,  102,   92,
       91,   86,   80,   76,   75,   73,   65,   60,   50,   49,
       37,   14,   13,    8,    7, 3351, 3351, 3351, 3351, 3351,

     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yyansi_c_flex_debug;
int yyansi_c_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yyansi_ctext;
#line 1 "scanner.l"
#define YY_NO_INPUT 1
#line 5 "scanner.l"

/*
 * This scanner is based on:
 *
 * cpp5.l, a C/C++ scanner written by James A. Roskind.
 * "Portions Copyright (c) 1989, 1990 James A. Roskind".
 * (http://www.idiom.com/free-compilers/,
 * ftp://ftp.infoseek.com/ftp/pub/c++grammar/,
 * ftp://ftp.sra.co.jp/.a/pub/cmd/c++grammar2.0.tar.gz)
 */

#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include "c_types.h"
#include "preprocessor_line.h"
#include "string_constant.h"

#include "literals/convert_float_literal.h"
#include "literals/convert_integer_literal.h"
#include "literals/convert_character_literal.h"
#include "literals/convert_string_literal.h"

#define PARSER ansi_c_parser
#define YYSTYPE unsigned
#undef  ECHO
#define ECHO

#include "ansi_c_parser.h"
#include "ansi_c_y.tab.h"

#define loc() \
  { newstack(yyansi_clval); PARSER.set_source_location(stack(yyansi_clval)); }

int make_identifier()
{
  loc();

  // this hashes the identifier
  irep_idt base_name=yyansi_ctext;
  
  if(PARSER.cpp98)
  {
    stack(yyansi_clval).id(ID_symbol);
    stack(yyansi_clval).set(ID_C_base_name, base_name);
    return TOK_IDENTIFIER;
  }
  else
  {
    std::string identifier(id2string(base_name));

    // figure out if this is a typedef or something else
    ansi_c_id_classt result=
      PARSER.lookup(identifier, PARSER.tag_following, false);

    PARSER.tag_following=false;

    stack(yyansi_clval).id(ID_symbol);
    stack(yyansi_clval).set(ID_C_base_name, base_name);
    stack(yyansi_clval).set(ID_identifier, identifier);
    stack(yyansi_clval).set(ID_C_id_class, result);

    if(result==ANSI_C_TYPEDEF)
      return TOK_TYPEDEFNAME;
    else
      return TOK_IDENTIFIER;
  }
}

int MSC_Keyword(int token)
{
  if(PARSER.mode==ansi_c_parsert::MSC)
  {
    loc();
    PARSER.tag_following=false;
    return token;
  }
  else
    return make_identifier();
}

int cpp98_keyword(int token)
{
  if(PARSER.cpp98)
  {
    loc();
    return token;
  }
  else
    return make_identifier();
}

int cpp11_keyword(int token)
{
  if(PARSER.cpp11)
  {
    loc();
    return token;
  }
  else
    return make_identifier();
}

int MSC_cpp_keyword(int token)
{
  if(PARSER.cpp98 && PARSER.mode==ansi_c_parsert::MSC)
  {
    loc();
    return token;
  }
  else
    return make_identifier();
}

int cpp_operator(int token)
{
  if(PARSER.cpp98)
  {
    loc();
    return token;
  }
  else
  {
    yyansi_cerror("C++ operator not allowed in C mode");
    return TOK_SCANNER_ERROR;
  }
}

/*** macros for easier rule definition **********************************/

















#line 206 "scanner.l"
void ansi_c_scanner_init()
{
  YY_FLUSH_BUFFER;
  BEGIN(0);
}
#line 3000 "ansi_c_lex.yy.cpp"

#define INITIAL 0
#define GRAMMAR 1
#define COMMENT1 2
#define COMMENT2 3
#define STRING_LITERAL 4
#define STRING_LITERAL_COMMENT 5
#define ASM_BLOCK 6
#define MSC_ASM 7
#define IGNORE_PARENS 8
#define MSC_PRAGMA 9
#define MSC_ANNOTATION 10
#define GCC_ATTRIBUTE1 11
#define GCC_ATTRIBUTE2 12
#define GCC_ATTRIBUTE3 13
#define GCC_ATTRIBUTE4 14
#define GCC_ATTRIBUTE5 15
#define GCC_ASM 16
#define GCC_ASM_PAREN 17

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yyansi_clex_destroy (void );

int yyansi_cget_debug (void );

void yyansi_cset_debug (int debug_flag  );

YY_EXTRA_TYPE yyansi_cget_extra (void );

void yyansi_cset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyansi_cget_in (void );

void yyansi_cset_in  (FILE * in_str  );

FILE *yyansi_cget_out (void );

void yyansi_cset_out  (FILE * out_str  );

yy_size_t yyansi_cget_leng (void );

char *yyansi_cget_text (void );

int yyansi_cget_lineno (void );

void yyansi_cset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yyansi_cwrap (void );
#else
extern int yyansi_cwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yyansi_ctext, yyansi_cleng, 1, yyansi_cout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyansi_cin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyansi_cin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyansi_cin))==0 && ferror(yyansi_cin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyansi_cin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yyansi_clex (void);

#define YY_DECL int yyansi_clex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yyansi_ctext and yyansi_cleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 213 "scanner.l"


#line 3200 "ansi_c_lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyansi_cin )
			yyansi_cin = stdin;

		if ( ! yyansi_cout )
			yyansi_cout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyansi_censure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE );
		}

		yyansi_c_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yyansi_ctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3352 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5596 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 215 "scanner.l"
{ BEGIN(GRAMMAR);
		  yyless(0);		/* start again with this character */
		 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 219 "scanner.l"
{ BEGIN(COMMENT1); } /* begin C comment state */
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 222 "scanner.l"
{ BEGIN(GRAMMAR); } /* end comment state, back to GRAMMAR */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 223 "scanner.l"
{ yyansi_cerror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(COMMENT1):
#line 224 "scanner.l"
{ yyansi_cerror("Unterminated comment"); return TOK_SCANNER_ERROR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 225 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 226 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 227 "scanner.l"
{ }
	YY_BREAK


case 8:
YY_RULE_SETUP
#line 231 "scanner.l"
{ BEGIN(STRING_LITERAL); } /* end comment state, back to STRING_LITERAL */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 232 "scanner.l"
{ yyansi_cerror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(STRING_LITERAL_COMMENT):
#line 233 "scanner.l"
{ yyansi_cerror("Unterminated comment"); return TOK_SCANNER_ERROR; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 234 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 235 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 236 "scanner.l"
{ }
	YY_BREAK

case 13:
YY_RULE_SETUP
#line 239 "scanner.l"
{ BEGIN(COMMENT2); }	/* begin C++ comment state */
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 242 "scanner.l"
{ BEGIN(GRAMMAR); }	/* end comment state, back GRAMMAR */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 243 "scanner.l"
{ } /* all characters within comments are ignored */
	YY_BREAK

case 16:
YY_RULE_SETUP
#line 246 "scanner.l"
{
                  newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_character_literal(yyansi_ctext, true);
                  PARSER.set_source_location(stack(yyansi_clval));
                  return TOK_CHARACTER;
                }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 253 "scanner.l"
{
                  PARSER.string_literal.clear();
                  PARSER.string_literal.append(yyansi_ctext);
                  newstack(yyansi_clval);
                  PARSER.set_source_location(stack(yyansi_clval));
                  // String literals can be continued in
                  // the next line
                  BEGIN(STRING_LITERAL);
                }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 263 "scanner.l"
{ PARSER.string_literal.append(yyansi_ctext); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 264 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 265 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 266 "scanner.l"
{
                  preprocessor_line(yyansi_ctext, PARSER);
                  PARSER.set_line_no(PARSER.get_line_no()-1);
		 }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 270 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 271 "scanner.l"
{ BEGIN(STRING_LITERAL_COMMENT); /* C comment, ignore */ }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 272 "scanner.l"
{ /* C++ comment, ignore */ }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 273 "scanner.l"
{ // anything else: back to normal
                  source_locationt l=stack(yyansi_clval).source_location();
                  stack(yyansi_clval)=convert_string_literal(PARSER.string_literal);
                  stack(yyansi_clval).add_source_location().swap(l);
                  BEGIN(GRAMMAR); // back to normal
                  yyless(0); // put back
                  return TOK_STRING;
                }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 282 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 283 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 285 "scanner.l"
{
                  preprocessor_line(yyansi_ctext, PARSER);
                  PARSER.set_line_no(PARSER.get_line_no()-1);
		 }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 290 "scanner.l"
{
                   // Done by Visual Studio and gcc
                   // http://msdn.microsoft.com/en-us/library/2e70t5y1%28v=vs.80%29.aspx
                   // push, pop could also use identifiers
                   if(PARSER.pragma_pack.empty())
                     PARSER.pragma_pack.push_back(convert_integer_literal("0"));
                   else
                     PARSER.pragma_pack.push_back(PARSER.pragma_pack.back());
		 }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 300 "scanner.l"
{
                   // Done by Visual Studio and gcc
                   // http://msdn.microsoft.com/en-us/library/2e70t5y1%28v=vs.80%29.aspx
                   // push, pop could also use identifiers
                   std::string tmp(yyansi_ctext);
                   std::string::size_type p=tmp.find(',')+1;
                   while(tmp[p]==' ' || tmp[p]=='\t') ++p;
                   std::string value=std::string(tmp, p, tmp.find_last_not_of(") \t\n\r")+1-p);
                   exprt n=convert_integer_literal(value);
                   PARSER.pragma_pack.push_back(n);
		 }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 312 "scanner.l"
{
                   // Done by Visual Studio and gcc
                   // http://msdn.microsoft.com/en-us/library/2e70t5y1%28v=vs.80%29.aspx
                   std::string tmp(yyansi_ctext);
                   std::string::size_type p=tmp.find('(')+1;
                   while(tmp[p]==' ' || tmp[p]=='\t') ++p;
                   std::string value=std::string(tmp, p, tmp.find_last_not_of(") \t\n\r")+1-p);
                   exprt n=convert_integer_literal(value);
                   PARSER.pragma_pack.push_back(n);
		 }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 323 "scanner.l"
{
                   // Done by Visual Studio and gcc
                   // http://msdn.microsoft.com/en-us/library/2e70t5y1%28v=vs.80%29.aspx
                   // push, pop could also use identifiers
                   if(!PARSER.pragma_pack.empty()) PARSER.pragma_pack.pop_back();
		 }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 330 "scanner.l"
{
                   // Done by Visual Studio and gcc
                   // http://msdn.microsoft.com/en-us/library/2e70t5y1%28v=vs.80%29.aspx
                   // should be equivalent to pop-all
                   PARSER.pragma_pack.clear();
		 }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 337 "scanner.l"
{
                   // silently ignore other pragmas
		 }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 341 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 342 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 343 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 345 "scanner.l"
{
		  yyansi_cerror("Preprocessor directive found");
		  return TOK_SCANNER_ERROR;
		 }
	YY_BREAK

/*** keywords ***/


case 39:
YY_RULE_SETUP
#line 355 "scanner.l"
{ loc(); return TOK_AUTO; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 356 "scanner.l"
{ if(PARSER.cpp98)
                    return make_identifier();
                  else
                  { loc(); return TOK_BOOL; }
                }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 361 "scanner.l"
{ loc(); return TOK_BREAK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 362 "scanner.l"
{ loc(); return TOK_CASE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 363 "scanner.l"
{ loc(); return TOK_CHAR; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 364 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 365 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 366 "scanner.l"
{ loc(); return TOK_CONTINUE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 367 "scanner.l"
{ loc(); return TOK_DEFAULT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 368 "scanner.l"
{ loc(); return TOK_DO; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 369 "scanner.l"
{ loc(); return TOK_DOUBLE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 370 "scanner.l"
{ loc(); return TOK_ELSE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 371 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_ENUM; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 372 "scanner.l"
{ loc(); return TOK_EXTERN; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 373 "scanner.l"
{ loc(); return TOK_FLOAT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 374 "scanner.l"
{ loc(); return TOK_FOR; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 375 "scanner.l"
{ loc(); return TOK_GOTO; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 376 "scanner.l"
{ loc(); return TOK_IF; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 377 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 378 "scanner.l"
{ loc(); return TOK_INT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 379 "scanner.l"
{ loc(); return TOK_LONG; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 380 "scanner.l"
{ loc(); return TOK_REGISTER; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 381 "scanner.l"
{ loc(); return TOK_RESTRICT; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 382 "scanner.l"
{ loc(); return TOK_RETURN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 383 "scanner.l"
{ loc(); return TOK_SHORT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 384 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 385 "scanner.l"
{ loc(); return TOK_SIZEOF; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 386 "scanner.l"
{ loc(); return TOK_STATIC; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 387 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_STRUCT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 388 "scanner.l"
{ loc(); return TOK_SWITCH; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 389 "scanner.l"
{ loc(); return TOK_TYPEDEF; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 390 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_UNION; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 391 "scanner.l"
{ loc(); return TOK_UNSIGNED; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 392 "scanner.l"
{ loc(); return TOK_VOID; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 393 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 394 "scanner.l"
{ loc(); return TOK_WHILE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 396 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC && !PARSER.cpp98)
                    { loc(); return TOK_GCC_AUTO_TYPE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 402 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_FLOAT80; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 408 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_FLOAT128; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 414 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_INT128; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 420 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_DECIMAL32; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 426 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_DECIMAL64; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 432 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_DECIMAL128; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 438 "scanner.l"
{ return MSC_Keyword(TOK_INT8); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 439 "scanner.l"
{ return MSC_Keyword(TOK_INT16); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 440 "scanner.l"
{ return MSC_Keyword(TOK_INT32); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 442 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM ||
                     PARSER.mode==ansi_c_parsert::CW)
                    { loc(); return TOK_INT64; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 449 "scanner.l"
{ return MSC_Keyword(TOK_PTR32); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 450 "scanner.l"
{ return MSC_Keyword(TOK_PTR64); }
	YY_BREAK

/*
"__stdcall"     { return MSC_Keyword(TOK_STDCALL); }
"__fastcall"    { return MSC_Keyword(TOK_FASTCALL); }
"__clrcall"     { return MSC_Keyword(TOK_CLRCALL); }
*/

case 88:
#line 461 "scanner.l"
case 89:
YY_RULE_SETUP
#line 461 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_COMPLEX; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 90:
#line 469 "scanner.l"
case 91:
YY_RULE_SETUP
#line 469 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_REAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 92:
#line 477 "scanner.l"
case 93:
YY_RULE_SETUP
#line 477 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_IMAG; }
                  else
                    return make_identifier();
                }
	YY_BREAK

/* note: "wchar_t" should be in the list above, but it is left out */
/*       because it is a 'typedef' in some standard header files   */

case 94:
YY_RULE_SETUP
#line 489 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::CW)
                    { loc(); return TOK_CW_VAR_ARG_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 495 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                        PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_BUILTIN_VA_ARG; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 96:
#line 503 "scanner.l"
case 97:
#line 504 "scanner.l"
case 98:
YY_RULE_SETUP
#line 504 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_OFFSETOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 511 "scanner.l"
{
                  if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GCC_BUILTIN_TYPES_COMPATIBLE_P; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 519 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 526 "scanner.l"
{ // MS supports __alignof:
                  // http://msdn.microsoft.com/en-us/library/45t0s5f4%28v=vs.71%29.aspx
                  if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 536 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 542 "scanner.l"
{
                  // interestingly, gcc doesn't support this,
                  // but Visual Studio does!
                  if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 552 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                  {
                    loc();
                    BEGIN(MSC_ASM);
                    return TOK_MSC_ASM;
                  }
                  else if(PARSER.cpp98)
                  {
                    loc();
                    return TOK_GCC_ASM;
                  }
                  else
                    BEGIN(GCC_ASM);
                }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 567 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW)
                  {
                    if(PARSER.cpp98)
                    {
                      loc();
                      return TOK_GCC_ASM;
                    }
                    else
                      BEGIN(GCC_ASM);
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 582 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                  {
                    if(PARSER.cpp98)
                    {
                      loc();
                      return TOK_GCC_ASM;
                    }
                    else
                      BEGIN(GCC_ASM);
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 598 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_BASED; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 604 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { /* ignore for now */ }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 610 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)  
                    { loc(); return TOK_WCHAR_T; }  
                  else
                    return make_identifier();
                }                                                                          
	YY_BREAK

/* C++ Keywords and Operators */

case 110:
YY_RULE_SETUP
#line 620 "scanner.l"
{ return cpp11_keyword(TOK_ALIGNAS); } // C++11
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 621 "scanner.l"
{ return cpp11_keyword(TOK_ALIGNOF); } // C++11
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 622 "scanner.l"
{ return cpp98_keyword(TOK_ANDAND); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 623 "scanner.l"
{ return cpp98_keyword(TOK_ANDASSIGN); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 624 "scanner.l"
{ return cpp98_keyword(TOK_BOOL); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 625 "scanner.l"
{ return cpp98_keyword(TOK_CATCH); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 626 "scanner.l"
{ return cpp11_keyword(TOK_CHAR16_T); } // C++11
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 627 "scanner.l"
{ return cpp11_keyword(TOK_CHAR32_T); } // C++11
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 628 "scanner.l"
{ return cpp98_keyword(TOK_CLASS); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 629 "scanner.l"
{ return cpp98_keyword('~'); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 630 "scanner.l"
{ return cpp11_keyword(TOK_CONSTEXPR); } // C++11
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 631 "scanner.l"
{ return cpp98_keyword(TOK_DELETE); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 632 "scanner.l"
{ return cpp11_keyword(TOK_DECLTYPE); } // C++11
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 633 "scanner.l"
{ return cpp98_keyword(TOK_EXPLICIT); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 634 "scanner.l"
{ return cpp98_keyword(TOK_FALSE); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 635 "scanner.l"
{ return cpp98_keyword(TOK_FRIEND); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 636 "scanner.l"
{ return cpp98_keyword(TOK_MUTABLE); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 637 "scanner.l"
{ return cpp98_keyword(TOK_NAMESPACE); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 638 "scanner.l"
{ return cpp98_keyword(TOK_NEW); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 639 "scanner.l"
{ return cpp11_keyword(TOK_NOEXCEPT); } // C++11
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 640 "scanner.l"
{ return cpp98_keyword('!'); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 641 "scanner.l"
{ return cpp98_keyword(TOK_NE); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 642 "scanner.l"
{ return cpp11_keyword(TOK_NULLPTR); } // C++11
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 643 "scanner.l"
{ return cpp98_keyword(TOK_OPERATOR); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 644 "scanner.l"
{ return cpp98_keyword(TOK_OROR); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 645 "scanner.l"
{ return cpp98_keyword(TOK_ORASSIGN); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 646 "scanner.l"
{ return cpp98_keyword(TOK_PRIVATE); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 647 "scanner.l"
{ return cpp98_keyword(TOK_PROTECTED); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 648 "scanner.l"
{ return cpp98_keyword(TOK_PUBLIC); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 649 "scanner.l"
{ return cpp11_keyword(TOK_STATIC_ASSERT); } // C++11
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 650 "scanner.l"
{ return cpp98_keyword(TOK_TEMPLATE); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 651 "scanner.l"
{ return cpp98_keyword(TOK_THIS); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 652 "scanner.l"
{ return cpp11_keyword(TOK_THREAD_LOCAL); } // C++11
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 653 "scanner.l"
{ return cpp98_keyword(TOK_THROW); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 654 "scanner.l"
{ return cpp98_keyword(TOK_TRUE); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 655 "scanner.l"
{ return cpp98_keyword(TOK_TYPEID); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 656 "scanner.l"
{ return cpp98_keyword(TOK_TYPENAME); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 657 "scanner.l"
{ return cpp98_keyword(TOK_USING); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 658 "scanner.l"
{ return cpp98_keyword(TOK_VIRTUAL); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 659 "scanner.l"
{ // CodeWarrior doesn't have wchar_t built in,
                      // and MSC has a command-line option to turn it off
                      if(PARSER.mode==ansi_c_parsert::CW)
                        return make_identifier();
                      else
                        return cpp98_keyword(TOK_WCHAR_T);
                    }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 666 "scanner.l"
{ return cpp98_keyword('^'); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 667 "scanner.l"
{ return cpp98_keyword(TOK_XORASSIGN); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 668 "scanner.l"
{ return cpp_operator(TOK_DOTPM); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 669 "scanner.l"
{ return cpp_operator(TOK_ARROWPM); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 670 "scanner.l"
{ if(PARSER.cpp98)
                        return cpp_operator(TOK_SCOPE);
                      else
                      {
                        yyless(1); // puts all but one : back into stream
                        loc();
                        PARSER.tag_following=false;
                        return ':';
                      }
                    }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 681 "scanner.l"
{ if(PARSER.cpp98 && PARSER.mode==ansi_c_parsert::GCC)
                        return cpp98_keyword(TOK_DECLTYPE);
                      else
                        return make_identifier();
                    }
	YY_BREAK

/* a huge batch of MS C++ extensions
   http://msdn.microsoft.com/en-us/library/ms177194(v=vs.80).aspx */

case 156:
YY_RULE_SETUP
#line 692 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 693 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 694 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 695 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 696 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 697 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 698 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 699 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 700 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 701 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 702 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 703 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 704 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 705 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 706 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 707 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 708 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 709 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 710 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 711 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 712 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 713 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 714 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 715 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 716 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 717 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 718 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 719 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 721 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_IF_EXISTS); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 722 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_IF_NOT_EXISTS); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 723 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNDERLYING_TYPE); }
	YY_BREAK
case 187:
#line 726 "scanner.l"
case 188:
#line 727 "scanner.l"
case 189:
#line 728 "scanner.l"
case 190:
#line 729 "scanner.l"
case 191:
#line 730 "scanner.l"
case 192:
#line 731 "scanner.l"
case 193:
#line 732 "scanner.l"
case 194:
#line 733 "scanner.l"
case 195:
#line 734 "scanner.l"
case 196:
#line 735 "scanner.l"
case 197:
YY_RULE_SETUP
#line 735 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
	             BEGIN(MSC_ANNOTATION);
                   else
	           {
	             yyless(1); // puts all but [ back into stream
	             loc();
	             PARSER.tag_following=false;
	             return yyansi_ctext[0]; // returns the [
	           }
                 }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 746 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                     return cpp98_keyword(TOK_CHAR16_T); // GNU extension
                   else
                     return make_identifier();
                 }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 752 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                     return cpp98_keyword(TOK_NULLPTR); // GNU extension
                   else
                     return make_identifier();
                 }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 758 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                     return cpp98_keyword(TOK_CHAR32_T); // GNU extension
                   else
                     return make_identifier();
                 }
	YY_BREAK
case 201:
#line 765 "scanner.l"
case 202:
YY_RULE_SETUP
#line 765 "scanner.l"
{ if(PARSER.cpp98)
                  {
                    BEGIN(IGNORE_PARENS);
                  }
                  else if(PARSER.mode==ansi_c_parsert::MSC ||
                          PARSER.mode==ansi_c_parsert::CW ||
                          PARSER.mode==ansi_c_parsert::ARM)
                  {
                    loc(); return TOK_MSC_DECLSPEC;
                  }
                  else if(PARSER.mode==ansi_c_parsert::GCC)
                  {
                    // GCC supports this on Windows as an exception!
                    // Should likely reject on other targets.
                    loc(); return TOK_MSC_DECLSPEC;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 785 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                  {
                    BEGIN(MSC_PRAGMA);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 204:
#line 795 "scanner.l"
case 205:
YY_RULE_SETUP
#line 795 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                  {
                    #if 1
                    if(PARSER.cpp98)
                      BEGIN(IGNORE_PARENS);
                    else
                      BEGIN(GCC_ATTRIBUTE1);
                    #else
                    loc(); return TOK_GCC_ATTRIBUTE;
                    #endif
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 812 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 813 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 815 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 817 "scanner.l"
{ loc(); return TOK_RESTRICT; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 818 "scanner.l"
{ loc(); return TOK_RESTRICT; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 820 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 821 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 822 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 823 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 824 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 825 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 826 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 827 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 828 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 829 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 830 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 832 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 833 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 835 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 836 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 838 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 839 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 841 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 850 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 860 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 870 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 879 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 888 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 897 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 906 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 915 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 924 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 934 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 944 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 954 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 964 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 973 "scanner.l"
{ if(PARSER.cpp98 ||
                     PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ICC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 982 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ICC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 990 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 992 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_INLINE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 999 "scanner.l"
{ // http://msdn.microsoft.com/en-us/library/z8y1yy88.aspx
                  if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_INLINE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 1006 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 1007 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 1009 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GCC_LABEL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 1016 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_TRY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 1022 "scanner.l"
{ if(PARSER.cpp98) // C++?
                    { loc(); return TOK_TRY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 1028 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_FINALLY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 1034 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_EXCEPT; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 1040 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_LEAVE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 1046 "scanner.l"
{ loc(); return TOK_CPROVER_ATOMIC; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 1047 "scanner.l"
{ loc(); return TOK_FORALL; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 1048 "scanner.l"
{ loc(); return TOK_EXISTS; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 1049 "scanner.l"
{ loc(); return TOK_ARRAY_OF; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 1050 "scanner.l"
{ loc(); return TOK_THREAD_LOCAL; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 1051 "scanner.l"
{ loc(); return TOK_CPROVER_BITVECTOR; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 1052 "scanner.l"
{ loc(); return TOK_CPROVER_FLOATBV; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 1053 "scanner.l"
{ loc(); return TOK_CPROVER_FIXEDBV; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 1054 "scanner.l"
{ loc(); return TOK_CPROVER_BOOL; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 1055 "scanner.l"
{ loc(); return TOK_CPROVER_THROW; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 1056 "scanner.l"
{ loc(); return TOK_CPROVER_CATCH; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 1057 "scanner.l"
{ loc(); return TOK_CPROVER_TRY; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 1058 "scanner.l"
{ loc(); return TOK_CPROVER_FINALLY; }
	YY_BREAK
case 268:
#line 1061 "scanner.l"
case 269:
YY_RULE_SETUP
#line 1061 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_ACSL_FORALL;
                }
	YY_BREAK
case 270:
#line 1066 "scanner.l"
case 271:
YY_RULE_SETUP
#line 1066 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_ACSL_EXISTS;
                }
	YY_BREAK
case 272:
#line 1070 "scanner.l"
case 273:
YY_RULE_SETUP
#line 1070 "scanner.l"
{ /* Non-standard, obviously. Found in Spec# and ACSL syntax. */
                  loc(); return TOK_IMPLIES;
                }
	YY_BREAK
case 274:
#line 1075 "scanner.l"
case 275:
YY_RULE_SETUP
#line 1075 "scanner.l"
{ /* Non-standard, obviously. Found in Spec# and ACSL syntax. */
                  loc(); return TOK_EQUIVALENT;
                }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1079 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_GE;
                }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1083 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_LE;
                }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1087 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_ANDAND;
                }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1091 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_OROR;
                }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1095 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_TRUE;
                }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1099 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_FALSE;
                }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1103 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_THREAD_LOCAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 283:
YY_RULE_SETUP
#line 1112 "scanner.l"
{ if(!PARSER.cpp98 &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_ALIGNAS; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 284:
YY_RULE_SETUP
#line 1122 "scanner.l"
{ if(!PARSER.cpp98 &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword. It can be used as a type qualifier
     and as a type specifier, which introduces ambiguity into the grammar.
     We thus have two different tokens.
     
     6.7.2.4 - 4: If the _Atomic keyword is immediately followed by a left
     parenthesis, it is interpreted as a type specifier (with a type name),
     not as a type qualifier.  
   */
case 285:
YY_RULE_SETUP
#line 1139 "scanner.l"
{ // put back all but _Atomic
                   yyless(7);

                   if(!PARSER.cpp98 &&
                      (PARSER.mode==ansi_c_parsert::GCC ||
                       PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_ATOMIC_TYPE_SPECIFIER; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1150 "scanner.l"
{ if(!PARSER.cpp98 &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_ATOMIC_TYPE_QUALIFIER; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 287:
YY_RULE_SETUP
#line 1160 "scanner.l"
{ if(!PARSER.cpp98 &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_GENERIC; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 288:
YY_RULE_SETUP
#line 1170 "scanner.l"
{ if(!PARSER.cpp98 &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_IMAGINARY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 289:
YY_RULE_SETUP
#line 1180 "scanner.l"
{ if(!PARSER.cpp98 &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_NORETURN; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 290:
YY_RULE_SETUP
#line 1190 "scanner.l"
{ if(!PARSER.cpp98 &&
                      (PARSER.mode==ansi_c_parsert::GCC ||
                       PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_STATIC_ASSERT; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 291:
YY_RULE_SETUP
#line 1200 "scanner.l"
{ if(!PARSER.cpp98 &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_THREAD_LOCAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK

/* operators following */

case 292:
YY_RULE_SETUP
#line 1213 "scanner.l"
{ loc(); return TOK_ARROW; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1214 "scanner.l"
{ loc(); return TOK_INCR; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1215 "scanner.l"
{ loc(); return TOK_DECR; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1216 "scanner.l"
{ loc(); return TOK_SHIFTLEFT; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1217 "scanner.l"
{ loc(); return TOK_SHIFTRIGHT; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 1218 "scanner.l"
{ loc(); return TOK_LE; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 1219 "scanner.l"
{ loc(); return TOK_GE; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 1220 "scanner.l"
{ loc(); return TOK_EQ; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1221 "scanner.l"
{ loc(); return TOK_NE; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 1222 "scanner.l"
{ loc(); return TOK_ANDAND; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 1223 "scanner.l"
{ loc(); return TOK_OROR; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 1224 "scanner.l"
{ loc(); return TOK_ELLIPSIS; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 1226 "scanner.l"
{ loc(); return TOK_MULTASSIGN; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 1227 "scanner.l"
{ loc(); return TOK_DIVASSIGN; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 1228 "scanner.l"
{ loc(); return TOK_MODASSIGN; }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 1229 "scanner.l"
{ loc(); return TOK_PLUSASSIGN; }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 1230 "scanner.l"
{ loc(); return TOK_MINUSASSIGN; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 1231 "scanner.l"
{ loc(); return TOK_SHLASSIGN; }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 1232 "scanner.l"
{ loc(); return TOK_SHRASSIGN; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 1233 "scanner.l"
{ loc(); return TOK_ANDASSIGN; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 1234 "scanner.l"
{ loc(); return TOK_XORASSIGN; }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 1235 "scanner.l"
{ loc(); return TOK_ORASSIGN; }
	YY_BREAK
/* digraphs */
case 314:
YY_RULE_SETUP
#line 1238 "scanner.l"
{ loc(); return '['; }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 1239 "scanner.l"
{ loc(); return ']'; }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 1240 "scanner.l"
{ loc(); return '{'; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 1241 "scanner.l"
{ loc(); return '}'; }
	YY_BREAK


case 318:
YY_RULE_SETUP
#line 1246 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 1248 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext);
                  PARSER.set_source_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 1254 "scanner.l"
{ if(PARSER.mode!=ansi_c_parsert::GCC)
                    {
		                  yyansi_cerror("Preprocessor directive found");
		                  return TOK_SCANNER_ERROR;
                    }
                  newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_source_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 1265 "scanner.l"
{ newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_source_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 1271 "scanner.l"
{ 
                  PARSER.tag_following=false;
                  if(PARSER.asm_block_following) { BEGIN(ASM_BLOCK); }
                  loc();
                  return yyansi_ctext[0];
                }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 1278 "scanner.l"
{ PARSER.asm_block_following=false;
                  PARSER.tag_following=false;
                  loc();
                  return yyansi_ctext[0];
                }
	YY_BREAK
/* This catches all one-character operators */
case 324:
YY_RULE_SETUP
#line 1285 "scanner.l"
{ loc(); PARSER.tag_following=false; return yyansi_ctext[0]; }
	YY_BREAK

case 325:
YY_RULE_SETUP
#line 1288 "scanner.l"
{ BEGIN(GRAMMAR); }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 1289 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 1291 "scanner.l"
{ BEGIN(ASM_BLOCK); loc(); return '{'; }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 1292 "scanner.l"
{ loc();
                  source_locationt l=stack(yyansi_clval).source_location();
                  stack(yyansi_clval)=string_constantt(yyansi_ctext);
                  stack(yyansi_clval).add_source_location()=l;
                  BEGIN(GRAMMAR);
                  return TOK_ASM_STRING;
                }
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 1300 "scanner.l"
{ loc();
                  source_locationt l=stack(yyansi_clval).source_location();
                  stack(yyansi_clval)=string_constantt(yyansi_ctext);
                  stack(yyansi_clval).add_source_location()=l;
                  return TOK_ASM_STRING; }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 1305 "scanner.l"
{ PARSER.asm_block_following=false;
                  BEGIN(GRAMMAR); loc(); return '}'; }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 1308 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(GRAMMAR); }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 1311 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 1312 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 1314 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(GRAMMAR); }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 1317 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 1318 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
/* The following ugly stuff avoids two-token lookahead in the parser;
     e.g., asm void f()  vs.  asm ("xyz") or asm { ... } */

case 337:
YY_RULE_SETUP
#line 1323 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 1324 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 1325 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); PARSER.asm_block_following=true; return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 1326 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 1327 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 1328 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 1329 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 1330 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 1331 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); PARSER.asm_block_following=true; return TOK_GCC_ASM; }
	YY_BREAK


case 346:
#line 1336 "scanner.l"
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 1336 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE2); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 1337 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 349:
/* rule 349 can match eol */
YY_RULE_SETUP
#line 1338 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 1339 "scanner.l"
{ BEGIN(GRAMMAR); loc(); return yyansi_ctext[0]; }
	YY_BREAK

// an attribute is following -- these may be keywords!
case 351:
#line 1345 "scanner.l"
case 352:
YY_RULE_SETUP
#line 1345 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_ALIGNED; }
	YY_BREAK
case 353:
#line 1348 "scanner.l"
case 354:
YY_RULE_SETUP
#line 1348 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_PACKED; }
	YY_BREAK
case 355:
#line 1351 "scanner.l"
case 356:
YY_RULE_SETUP
#line 1351 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_TRANSPARENT_UNION; }
	YY_BREAK
case 357:
#line 1354 "scanner.l"
case 358:
YY_RULE_SETUP
#line 1354 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_VECTOR_SIZE; }
	YY_BREAK
case 359:
#line 1357 "scanner.l"
case 360:
YY_RULE_SETUP
#line 1357 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_MODE; }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 1359 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_GNU_INLINE; }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 1361 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 363:
/* rule 363 can match eol */
YY_RULE_SETUP
#line 1362 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 1363 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE4); }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 1364 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE5); }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 1365 "scanner.l"
{ /* ignore */ }
	YY_BREAK

// an attribute we do process
case 367:
YY_RULE_SETUP
#line 1369 "scanner.l"
{ PARSER.parenthesis_counter++; loc(); return '('; }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 1370 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                  {
                    BEGIN(GCC_ATTRIBUTE5);
                    loc();
                    return TOK_GCC_ATTRIBUTE_END;
                  }
                  else
                  {
                    PARSER.parenthesis_counter--;
                    loc();
                    return ')';
                  }
                }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 1383 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                  {
                    BEGIN(GCC_ATTRIBUTE2);
                    loc();
                    return TOK_GCC_ATTRIBUTE_END;
                  }
                  else
                  {
                    loc();
                    return ',';
                  }
                }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 1395 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext);
                  PARSER.set_source_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 1400 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 372:
/* rule 372 can match eol */
YY_RULE_SETUP
#line 1401 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 1402 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 1403 "scanner.l"
{ loc(); return yyansi_ctext[0]; }
	YY_BREAK

// an attribute we just ignore
case 375:
YY_RULE_SETUP
#line 1407 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 1408 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                    BEGIN(GCC_ATTRIBUTE5);
                  else
                    PARSER.parenthesis_counter--;
                }
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 1413 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                    BEGIN(GCC_ATTRIBUTE2); }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 1415 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

// end bit: the closing parenthesis
case 379:
YY_RULE_SETUP
#line 1419 "scanner.l"
{ BEGIN(GRAMMAR); }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 1420 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 381:
/* rule 381 can match eol */
YY_RULE_SETUP
#line 1421 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 1422 "scanner.l"
{ BEGIN(GRAMMAR); loc(); return yyansi_ctext[0]; }
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(GRAMMAR):
case YY_STATE_EOF(COMMENT2):
case YY_STATE_EOF(STRING_LITERAL):
case YY_STATE_EOF(ASM_BLOCK):
case YY_STATE_EOF(MSC_ASM):
case YY_STATE_EOF(IGNORE_PARENS):
case YY_STATE_EOF(MSC_PRAGMA):
case YY_STATE_EOF(MSC_ANNOTATION):
case YY_STATE_EOF(GCC_ATTRIBUTE1):
case YY_STATE_EOF(GCC_ATTRIBUTE2):
case YY_STATE_EOF(GCC_ATTRIBUTE3):
case YY_STATE_EOF(GCC_ATTRIBUTE4):
case YY_STATE_EOF(GCC_ATTRIBUTE5):
case YY_STATE_EOF(GCC_ASM):
case YY_STATE_EOF(GCC_ASM_PAREN):
#line 1425 "scanner.l"
{ yyterminate(); /* done! */ }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 1427 "scanner.l"
ECHO;
	YY_BREAK
#line 5838 "ansi_c_lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyansi_cin at a new source and called
			 * yyansi_clex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyansi_cin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yyansi_cwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yyansi_ctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yyansi_clex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyansi_crealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyansi_crestart(yyansi_cin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyansi_crealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 93);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3352 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 93;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3352 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3351);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyansi_crestart(yyansi_cin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yyansi_cwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yyansi_ctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyansi_crestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyansi_censure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE );
	}

	yyansi_c_init_buffer(YY_CURRENT_BUFFER,input_file );
	yyansi_c_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyansi_c_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yyansi_cpop_buffer_state();
	 *		yyansi_cpush_buffer_state(new_buffer);
     */
	yyansi_censure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yyansi_c_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yyansi_cwrap()) processing, but the only time this flag
	 * is looked at is after yyansi_cwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yyansi_c_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyansi_cin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyansi_c_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyansi_calloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyansi_calloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yyansi_c_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yyansi_c_create_buffer()
 * 
 */
    void yyansi_c_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyansi_cfree((void *) b->yy_ch_buf  );

	yyansi_cfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyansi_crestart() or at EOF.
 */
    static void yyansi_c_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yyansi_c_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yyansi_c_init_buffer was _probably_
     * called from yyansi_crestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyansi_c_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yyansi_c_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyansi_cpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyansi_censure_buffer_stack();

	/* This block is copied from yyansi_c_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yyansi_c_switch_to_buffer. */
	yyansi_c_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyansi_cpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yyansi_c_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yyansi_c_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyansi_censure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyansi_calloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyansi_censure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyansi_crealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyansi_censure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yyansi_c_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyansi_calloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yyansi_c_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yyansi_clex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yyansi_c_scan_bytes() instead.
 */
YY_BUFFER_STATE yyansi_c_scan_string (yyconst char * yystr )
{
    
	return yyansi_c_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yyansi_clex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yyansi_c_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyansi_calloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yyansi_c_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yyansi_c_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyansi_ctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yyansi_ctext[yyansi_cleng] = (yy_hold_char); \
		(yy_c_buf_p) = yyansi_ctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyansi_cleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyansi_cget_lineno  (void)
{
        
    return yyansi_clineno;
}

/** Get the input stream.
 * 
 */
FILE *yyansi_cget_in  (void)
{
        return yyansi_cin;
}

/** Get the output stream.
 * 
 */
FILE *yyansi_cget_out  (void)
{
        return yyansi_cout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyansi_cget_leng  (void)
{
        return yyansi_cleng;
}

/** Get the current token.
 * 
 */

char *yyansi_cget_text  (void)
{
        return yyansi_ctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyansi_cset_lineno (int  line_number )
{
    
    yyansi_clineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yyansi_c_switch_to_buffer
 */
void yyansi_cset_in (FILE *  in_str )
{
        yyansi_cin = in_str ;
}

void yyansi_cset_out (FILE *  out_str )
{
        yyansi_cout = out_str ;
}

int yyansi_cget_debug  (void)
{
        return yyansi_c_flex_debug;
}

void yyansi_cset_debug (int  bdebug )
{
        yyansi_c_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yyansi_clex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyansi_cin = stdin;
    yyansi_cout = stdout;
#else
    yyansi_cin = (FILE *) 0;
    yyansi_cout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yyansi_clex_init()
     */
    return 0;
}

/* yyansi_clex_destroy is for both reentrant and non-reentrant scanners. */
int yyansi_clex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yyansi_c_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yyansi_cpop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyansi_cfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yyansi_clex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyansi_calloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyansi_crealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyansi_cfree (void * ptr )
{
	free( (char *) ptr );	/* see yyansi_crealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1427 "scanner.l"



int yyansi_cwrap() { return 1; }

